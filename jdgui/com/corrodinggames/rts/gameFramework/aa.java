/*     */ package com.corrodinggames.rts.gameFramework;
/*     */ 
/*     */ import android.graphics.PointF;
/*     */ import com.corrodinggames.rts.game.units.r;
/*     */ import com.corrodinggames.rts.gameFramework.g.ap;
/*     */ import com.corrodinggames.rts.gameFramework.g.k;
/*     */ import com.corrodinggames.rts.gameFramework.utility.m;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class aa
/*     */   extends bi
/*     */ {
/*     */   int a;
/*     */   
/*     */   public void a() {
/*  31 */     this.a = 1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void a(ap paramap) {
/*  39 */     paramap.a(0);
/*  40 */     paramap.a(this.a);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void a(k paramk) {
/*  46 */     paramk.f();
/*  47 */     this.a = paramk.f();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void a(float paramFloat) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ab b() {
/*  66 */     ab ab = new ab(this);
/*  67 */     ab.e = this.a;
/*  68 */     this.a++;
/*  69 */     return ab;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public ab c() {
/*  75 */     ab ab = new ab(this);
/*  76 */     ab.e = -1;
/*     */     
/*  78 */     ab.b = true;
/*  79 */     return ab;
/*     */   }
/*     */ 
/*     */   
/*  83 */   PointF b = new PointF();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void a(m paramm1, r paramr, m paramm2, float paramFloat, int paramInt) {
/* 607 */     byte b = 0;
/*     */ 
/*     */ 
/*     */     
/* 611 */     while (!paramm2.isEmpty()) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 616 */       r r1 = null;
/* 617 */       float f = -1.0F;
/* 618 */       PointF pointF = null;
/* 619 */       byte b1 = -1;
/*     */       
/* 621 */       Object[] arrayOfObject1 = paramm2.a();
/*     */ 
/*     */       
/* 624 */       Object[] arrayOfObject2 = paramm1.a(); byte b2; int i;
/* 625 */       for (b2 = 0, i = paramm1.size(); b2 < i; b2++) {
/*     */         
/* 627 */         r r2 = (r)arrayOfObject2[b2];
/*     */         
/* 629 */         if (r2.U == paramr && !r2.aa) {
/*     */ 
/*     */           
/* 632 */           float f1 = -1.0F;
/* 633 */           PointF pointF1 = null;
/* 634 */           byte b3 = -1;
/*     */ 
/*     */           
/* 637 */           for (byte b4 = 0; b4 < paramm2.a; b4++) {
/*     */             
/* 639 */             PointF pointF2 = (PointF)arrayOfObject1[b4];
/*     */             
/* 641 */             float f2 = paramr.dH + pointF2.a;
/* 642 */             float f3 = paramr.dI + pointF2.b;
/*     */             
/* 644 */             float f4 = f.a(r2.dH, r2.dI, f2, f3);
/*     */             
/* 646 */             if (f1 == -1.0F || f4 < f1) {
/*     */               
/* 648 */               f1 = f4;
/* 649 */               pointF1 = pointF2;
/* 650 */               b3 = b4;
/*     */             } 
/*     */           } 
/*     */           
/* 654 */           if (f1 > f) {
/*     */             
/* 656 */             r1 = r2;
/* 657 */             f = f1;
/* 658 */             pointF = pointF1;
/* 659 */             b1 = b3;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 666 */       if (r1 == null) {
/*     */         break;
/*     */       }
/*     */ 
/*     */       
/* 671 */       b++;
/*     */       
/* 673 */       r1.aa = true;
/* 674 */       r1.ab = pointF.a;
/* 675 */       r1.ac = pointF.b;
/*     */       
/* 677 */       r1.ad = paramFloat;
/*     */       
/* 679 */       r1.af = f;
/*     */       
/* 681 */       r1.Y = (short)(paramInt + 1);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 696 */       paramm2.remove(b1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void a(m paramm, r paramr) {
/* 707 */     boolean bool = false;
/*     */ 
/*     */     
/*     */     while (true) {
/* 711 */       r r1 = null;
/*     */ 
/*     */ 
/*     */       
/* 715 */       for (r r4 : paramm) {
/*     */         
/* 717 */         if (r4.U == paramr && r4.af > 0.0F)
/*     */         {
/* 719 */           if (r1 == null || r4.af > r1.af)
/*     */           {
/* 721 */             if (r4.aa && r4.af > 100.0F)
/*     */             {
/* 723 */               r1 = r4;
/*     */             }
/*     */           }
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 730 */       if (r1 == null) {
/*     */         break;
/*     */       }
/*     */ 
/*     */       
/* 735 */       r1.aa = false;
/*     */       
/* 737 */       r r2 = null;
/* 738 */       float f1 = 0.0F;
/*     */       
/* 740 */       r r3 = r1;
/*     */       
/* 742 */       int i = f.a((int)r3.af);
/*     */       
/* 744 */       for (r r4 : paramm) {
/*     */         
/* 746 */         if (r4.U == paramr && r4.af > 0.0F && r4 != r3) {
/*     */           
/* 748 */           int j = f.a((int)r4.af) + i;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 754 */           int k = 0;
/*     */           
/* 756 */           k += f.c(r3.dH, r3.dI, paramr.dH + r4.ab, paramr.dI + r4.ac);
/*     */ 
/*     */ 
/*     */           
/* 760 */           k += f.c(r4.dH, r4.dI, paramr.dH + r3.ab, paramr.dI + r3.ac);
/*     */ 
/*     */ 
/*     */           
/* 764 */           float f = (k - j);
/*     */           
/* 766 */           if (f < f1) {
/*     */             
/* 768 */             f1 = f;
/* 769 */             r2 = r4;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 774 */       if (r2 == null) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */       
/* 779 */       float f2 = r3.ab;
/* 780 */       float f3 = r3.ac;
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 785 */       r3.ab = r2.ab;
/* 786 */       r3.ac = r2.ac;
/*     */       
/* 788 */       r3.af = f.a(r3.dH, r3.dI, paramr.dH + r3.ab, paramr.dI + r3.ac);
/*     */ 
/*     */       
/* 791 */       r2.ab = f2;
/* 792 */       r2.ac = f3;
/* 793 */       r2.af = f.a(r2.dH, r2.dI, paramr.dH + r2.ab, paramr.dI + r2.ac);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public m a(int paramInt, float paramFloat1, float paramFloat2) {
/* 822 */     byte b1 = 1;
/* 823 */     byte b2 = 0;
/*     */     
/* 825 */     byte b3 = 6;
/* 826 */     int i = b3 / 2;
/*     */     
/* 828 */     float f1 = 2.0F + paramFloat1 * 2.0F * 1.5F;
/*     */     
/* 830 */     m m = new m();
/*     */     
/* 832 */     int j = paramInt;
/*     */     
/* 834 */     if (j % 2 != 0)
/*     */     {
/* 836 */       j++;
/*     */     }
/*     */     
/* 839 */     float f2 = f.i(paramFloat2);
/* 840 */     float f3 = f.h(paramFloat2);
/*     */ 
/*     */     
/* 843 */     for (byte b4 = 0; b4 < j; b4++) {
/*     */       int k;
/*     */ 
/*     */       
/* 847 */       if (b1 % 2 == 0) {
/*     */         
/* 849 */         k = i + b1 / 2;
/*     */       }
/*     */       else {
/*     */         
/* 853 */         k = i - (b1 + 1) / 2;
/*     */       } 
/*     */       
/* 856 */       float f4 = (k - i) * f1;
/* 857 */       float f5 = -b2 * f1;
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 862 */       float f6 = f5 * f2 - f4 * f3;
/* 863 */       float f7 = f4 * f2 + f5 * f3;
/*     */       
/* 865 */       m.add(new PointF(f6, f7));
/*     */       
/* 867 */       b1++;
/*     */       
/* 869 */       if (b1 > b3) {
/*     */         
/* 871 */         b1 = 0;
/* 872 */         b2++;
/*     */       } 
/*     */     } 
/*     */     
/* 876 */     return m;
/*     */   }
/*     */ }


/* Location:              D:\Rusted Warfare\Rusted Warfare\game-lib.jar!\com\corrodinggames\rts\gameFramework\aa.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */