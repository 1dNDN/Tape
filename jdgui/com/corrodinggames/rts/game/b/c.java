/*      */ package com.corrodinggames.rts.game.b;
/*      */ 
/*      */ import android.graphics.Paint;
/*      */ import android.graphics.PorterDuff;
/*      */ import android.graphics.Rect;
/*      */ import android.graphics.RectF;
/*      */ import com.corrodinggames.rts.game.k;
/*      */ import com.corrodinggames.rts.gameFramework.bj;
/*      */ import com.corrodinggames.rts.gameFramework.d.f;
/*      */ import com.corrodinggames.rts.gameFramework.f;
/*      */ import com.corrodinggames.rts.gameFramework.j.e;
/*      */ import com.corrodinggames.rts.gameFramework.j.l;
/*      */ import com.corrodinggames.rts.gameFramework.j.q;
/*      */ import com.corrodinggames.rts.gameFramework.l;
/*      */ import com.corrodinggames.rts.gameFramework.u;
/*      */ import com.corrodinggames.rts.gameFramework.w;
/*      */ import java.util.ArrayList;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class c
/*      */ {
/* 2391 */   int a = 7;
/*      */   
/* 2393 */   public e b = null;
/* 2394 */   public l c = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 2399 */   d[][] d = (d[][])null;
/*      */   
/* 2401 */   public Paint e = (Paint)new q();
/*      */ 
/*      */   
/*      */   int f;
/*      */   
/*      */   int g;
/*      */   
/*      */   int h;
/*      */   
/*      */   int i;
/*      */   
/*      */   int j;
/*      */   
/*      */   int k;
/*      */   
/*      */   float l;
/*      */   
/* 2418 */   float m = 1.0F;
/*      */ 
/*      */   
/*      */   boolean n;
/*      */ 
/*      */   
/*      */   public strictfp void a() {
/* 2425 */     l l1 = l.u();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2441 */     float f1 = g();
/*      */     
/* 2443 */     this.m = f1;
/*      */     
/* 2445 */     if (this.m > 1.0F);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2457 */     this.i = (int)(this.h / this.m);
/* 2458 */     this.k = (int)(this.j / this.m);
/*      */     
/* 2460 */     this.l = 1.0F / this.k;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2466 */     this.f = l1.cb - this.i / 2;
/* 2467 */     this.g = l1.cc - this.i / 2;
/*      */ 
/*      */     
/* 2470 */     byte b1 = 20;
/* 2471 */     float f2 = 1.0F / b1;
/*      */ 
/*      */ 
/*      */     
/* 2475 */     this.f = (int)(this.f * f2) * b1;
/* 2476 */     this.g = (int)(this.g * f2) * b1;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2481 */     for (byte b2 = 0; b2 < this.a; b2++) {
/*      */       
/* 2483 */       for (byte b = 0; b < this.a; b++) {
/*      */ 
/*      */         
/* 2486 */         d d1 = this.d[b2][b];
/* 2487 */         d1.k = true;
/*      */         
/* 2489 */         d1.n = false;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void b() {
/* 2497 */     for (byte b = 0; b < this.a; b++) {
/*      */       
/* 2499 */       for (byte b1 = 0; b1 < this.a; b1++) {
/*      */         
/* 2501 */         d d1 = this.d[b][b1];
/* 2502 */         d1.i = b;
/* 2503 */         d1.j = b1;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(int paramInt) {
/* 2514 */     d[] arrayOfD = new d[this.a];
/*      */     
/* 2516 */     if (paramInt > 0) {
/*      */       byte b;
/* 2518 */       for (b = 0; b < this.a; b++)
/*      */       {
/* 2520 */         arrayOfD[b] = this.d[b][0];
/*      */       }
/* 2522 */       for (b = 1; b < this.a; b++) {
/*      */         
/* 2524 */         for (byte b1 = 0; b1 < this.a; b1++)
/*      */         {
/* 2526 */           this.d[b1][b - 1] = this.d[b1][b];
/*      */         }
/*      */       } 
/*      */       
/* 2530 */       for (b = 0; b < this.a; b++)
/*      */       {
/* 2532 */         this.d[b][this.a - 1] = arrayOfD[b];
/*      */       }
/* 2534 */       for (b = 0; b < this.a; b++)
/*      */       {
/*      */         
/* 2537 */         (this.d[b][this.a - 1]).k = true;
/*      */       }
/*      */     } else {
/*      */       int i;
/*      */       
/* 2542 */       for (i = 0; i < this.a; i++)
/*      */       {
/* 2544 */         arrayOfD[i] = this.d[i][this.a - 1];
/*      */       }
/* 2546 */       for (i = this.a - 2; i >= 0; i--) {
/*      */         
/* 2548 */         for (byte b = 0; b < this.a; b++)
/*      */         {
/* 2550 */           this.d[b][i + 1] = this.d[b][i];
/*      */         }
/*      */       } 
/* 2553 */       for (i = 0; i < this.a; i++)
/*      */       {
/* 2555 */         this.d[i][0] = arrayOfD[i];
/*      */       }
/* 2557 */       for (i = 0; i < this.a; i++)
/*      */       {
/*      */         
/* 2560 */         (this.d[i][0]).k = true;
/*      */       }
/*      */     } 
/*      */     
/* 2564 */     b();
/*      */   }
/*      */ 
/*      */   
/*      */   public strictfp void b(int paramInt) {
/* 2569 */     d[] arrayOfD = new d[this.a];
/*      */     
/* 2571 */     if (paramInt > 0) {
/*      */       byte b;
/* 2573 */       for (b = 0; b < this.a; b++)
/*      */       {
/* 2575 */         arrayOfD[b] = this.d[0][b];
/*      */       }
/* 2577 */       for (b = 1; b < this.a; b++) {
/*      */         
/* 2579 */         for (byte b1 = 0; b1 < this.a; b1++)
/*      */         {
/* 2581 */           this.d[b - 1][b1] = this.d[b][b1];
/*      */         }
/*      */       } 
/*      */       
/* 2585 */       for (b = 0; b < this.a; b++)
/*      */       {
/* 2587 */         this.d[this.a - 1][b] = arrayOfD[b];
/*      */       }
/* 2589 */       for (b = 0; b < this.a; b++)
/*      */       {
/*      */         
/* 2592 */         (this.d[this.a - 1][b]).k = true;
/*      */       }
/*      */     } else {
/*      */       int i;
/*      */       
/* 2597 */       for (i = 0; i < this.a; i++)
/*      */       {
/* 2599 */         arrayOfD[i] = this.d[this.a - 1][i];
/*      */       }
/* 2601 */       for (i = this.a - 2; i >= 0; i--) {
/*      */         
/* 2603 */         for (byte b = 0; b < this.a; b++)
/*      */         {
/* 2605 */           this.d[i + 1][b] = this.d[i][b];
/*      */         }
/*      */       } 
/* 2608 */       for (i = 0; i < this.a; i++)
/*      */       {
/* 2610 */         this.d[0][i] = arrayOfD[i];
/*      */       }
/* 2612 */       for (i = 0; i < this.a; i++)
/*      */       {
/*      */         
/* 2615 */         (this.d[0][i]).k = true;
/*      */       }
/*      */     } 
/*      */     
/* 2619 */     b();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp d a(int paramInt1, int paramInt2) {
/* 2627 */     if (paramInt1 < 0 || paramInt1 >= this.a)
/*      */     {
/* 2629 */       return null;
/*      */     }
/* 2631 */     if (paramInt2 < 0 || paramInt2 >= this.a)
/*      */     {
/* 2633 */       return null;
/*      */     }
/*      */     
/* 2636 */     if (this.d == null)
/*      */     {
/* 2638 */       return null;
/*      */     }
/*      */ 
/*      */     
/* 2642 */     return this.d[paramInt1][paramInt2];
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(int paramInt1, int paramInt2, boolean paramBoolean) {
/* 2650 */     l l1 = l.u();
/* 2651 */     b b = l1.bt;
/* 2652 */     int i = b.k;
/* 2653 */     int j = b.l;
/*      */     
/* 2655 */     int k = paramInt1 * i;
/* 2656 */     int m = paramInt2 * j;
/*      */     
/* 2658 */     int n = k - this.f;
/* 2659 */     int i1 = m - this.g;
/*      */     
/* 2661 */     a(n - i, i1 - j, 3 * i, 3 * j, paramBoolean);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void c() {
/* 2668 */     if (this.d != null)
/*      */     {
/* 2670 */       for (byte b = 0; b < this.a; b++) {
/*      */         
/* 2672 */         for (byte b1 = 0; b1 < this.a; b1++) {
/*      */           
/* 2674 */           d d1 = this.d[b][b1];
/* 2675 */           d1.k = true;
/*      */         } 
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean) {
/* 2687 */     int i = (int)(paramInt1 * this.l);
/* 2688 */     int j = (int)(paramInt2 * this.l);
/*      */ 
/*      */     
/* 2691 */     d d1 = a(i, j);
/*      */     
/* 2693 */     if (d1 != null) {
/*      */ 
/*      */       
/* 2696 */       if (paramBoolean) {
/*      */         
/* 2698 */         d1.l = true;
/*      */       }
/*      */       else {
/*      */         
/* 2702 */         d1.k = true;
/*      */       } 
/*      */ 
/*      */       
/* 2706 */       boolean bool1 = false;
/* 2707 */       boolean bool2 = false;
/*      */       
/* 2709 */       if (paramInt1 + paramInt3 >= d1.i * this.k + this.i)
/*      */       {
/* 2711 */         bool1 = true;
/*      */       }
/* 2713 */       if (paramInt2 + paramInt4 >= d1.j * this.k + this.i)
/*      */       {
/* 2715 */         bool2 = true;
/*      */       }
/*      */       
/* 2718 */       if (bool1) {
/*      */         
/* 2720 */         d d2 = a(i + 1, j);
/* 2721 */         if (d2 != null)
/*      */         {
/* 2723 */           if (paramBoolean) {
/*      */             
/* 2725 */             d2.l = true;
/*      */           }
/*      */           else {
/*      */             
/* 2729 */             d2.k = true;
/*      */           } 
/*      */         }
/*      */       } 
/* 2733 */       if (bool2) {
/*      */         
/* 2735 */         d d2 = a(i, j + 1);
/* 2736 */         if (d2 != null)
/*      */         {
/* 2738 */           if (paramBoolean) {
/*      */             
/* 2740 */             d2.l = true;
/*      */           }
/*      */           else {
/*      */             
/* 2744 */             d2.k = true;
/*      */           } 
/*      */         }
/*      */       } 
/* 2748 */       if (bool1 && bool2) {
/*      */         
/* 2750 */         d d2 = a(i + 1, j + 1);
/* 2751 */         if (d2 != null)
/*      */         {
/* 2753 */           if (paramBoolean) {
/*      */             
/* 2755 */             d2.l = true;
/*      */           }
/*      */           else {
/*      */             
/* 2759 */             d2.k = true;
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(k paramk) {
/* 2771 */     RectF rectF = paramk.c();
/*      */     
/* 2773 */     for (byte b = 0; b < this.a; b++) {
/*      */       
/* 2775 */       for (byte b1 = 0; b1 < this.a; b1++) {
/*      */ 
/*      */         
/* 2778 */         if (this.d != null) {
/*      */           
/* 2780 */           d d1 = this.d[b][b1];
/*      */           
/* 2782 */           Rect rect = d1.b();
/*      */           
/* 2784 */           if (f.a(rect, rectF)) {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 2789 */             boolean bool = (this.m != 1.0F) ? true : false;
/* 2790 */             if (bool);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 2796 */             paramk.a(d1.a, d1
/* 2797 */                 .c(), d1
/* 2798 */                 .d(), this.m);
/*      */ 
/*      */             
/* 2801 */             if (bool);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(int paramInt1, int paramInt2, l paraml) {
/* 2826 */     d d1 = this.d[paramInt1][paramInt2];
/*      */ 
/*      */     
/* 2829 */     boolean bool = (this.m != 1.0F) ? true : false;
/* 2830 */     if (bool);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2839 */     Rect rect = d1.b();
/*      */     
/* 2841 */     f.a(rect, 95.0F);
/*      */     
/* 2843 */     w[] arrayOfW = w.dK.a();
/* 2844 */     int i = w.dK.size();
/*      */     
/* 2846 */     for (byte b = 0; b < i; b++) {
/*      */       
/* 2848 */       w w = arrayOfW[b];
/*      */       
/* 2850 */       if (w instanceof k) {
/*      */         
/* 2852 */         k k = (k)w;
/*      */         
/* 2854 */         if (rect.b((int)k.dH, (int)k.dI))
/*      */         {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2860 */           k.a(paraml, d1
/* 2861 */               .c(), d1
/* 2862 */               .d(), this.m);
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2870 */     if (bool);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 2887 */   Rect o = new Rect();
/*      */   
/*      */   public strictfp void b(int paramInt1, int paramInt2, l paraml) {
/* 2890 */     l l1 = l.u();
/* 2891 */     b b = l1.bt;
/*      */     
/* 2893 */     if (l1.bA.D()) {
/*      */ 
/*      */       
/* 2896 */       int i = this.f + paramInt1 * this.k;
/* 2897 */       int j = this.g + paramInt2 * this.k;
/*      */ 
/*      */       
/* 2900 */       int k = i;
/* 2901 */       int m = j;
/* 2902 */       int n = this.i;
/* 2903 */       int i1 = this.i;
/*      */       
/* 2905 */       int i2 = b.r.n;
/* 2906 */       int i3 = b.r.o;
/*      */       
/* 2908 */       int i4 = (int)(k * b.o);
/* 2909 */       if (i4 < 0) i4 = 0; 
/* 2910 */       int i5 = (int)(m * b.p);
/* 2911 */       if (i5 < 0) i5 = 0; 
/* 2912 */       int i6 = (int)((k + n) * b.o);
/* 2913 */       if (i6 > i2 - 1) i6 = i2 - 1; 
/* 2914 */       int i7 = (int)((m + i1) * b.p);
/* 2915 */       if (i7 > i3 - 1) i7 = i3 - 1;
/*      */ 
/*      */ 
/*      */       
/* 2919 */       if (this.m < 0.4D) {
/*      */         return;
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 2926 */       boolean bool = (this.m != 1.0F) ? true : false;
/* 2927 */       if (bool) {
/*      */         
/* 2929 */         paraml.h();
/* 2930 */         paraml.a(this.m, this.m);
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 2935 */       if (bool)
/*      */       {
/* 2937 */         paraml.i();
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void b(int paramInt1, int paramInt2) {
/* 2946 */     d d1 = b.ad.d[paramInt1][paramInt2];
/*      */     
/* 2948 */     l l1 = l.u();
/* 2949 */     b b = l1.bt;
/*      */ 
/*      */ 
/*      */     
/* 2953 */     d1.n = true;
/*      */ 
/*      */     
/* 2956 */     this.c.b(-16777216);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2968 */     e e1 = l1.bE.J;
/*      */     
/* 2970 */     if (e1 != null) {
/*      */       
/* 2972 */       Rect rect = new Rect();
/* 2973 */       RectF rectF = new RectF();
/*      */       
/* 2975 */       float f1 = (this.f + paramInt1 * this.k) / (b.k * b.y);
/* 2976 */       float f2 = (this.g + paramInt2 * this.k) / (b.l * b.z);
/*      */       
/* 2978 */       float f3 = (this.f + (paramInt1 + 1) * this.k) / (b.k * b.y);
/* 2979 */       float f4 = (this.g + (paramInt2 + 1) * this.k) / (b.l * b.z);
/*      */       
/* 2981 */       rect.a((int)(f1 * e1.k), (int)(f2 * e1.l), (int)(f3 * e1.k), (int)(f4 * e1.l));
/*      */ 
/*      */ 
/*      */       
/* 2985 */       rectF.a(0.0F, 0.0F, this.h, this.h);
/*      */ 
/*      */       
/* 2988 */       this.c.a(e1, rect, rectF, this.e);
/*      */     } 
/*      */ 
/*      */     
/* 2992 */     this.c.m();
/*      */     
/* 2994 */     if (l.aG)
/*      */     {
/*      */ 
/*      */       
/* 2998 */       d1.a.a(0, PorterDuff.Mode.CLEAR);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3006 */     d1.a.b(this.b, 0.0F, 0.0F, null);
/* 3007 */     d1.d.o();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void c(int paramInt1, int paramInt2) {
/* 3019 */     c(paramInt1, paramInt2, this.c);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void c(int paramInt1, int paramInt2, l paraml) {
/* 3026 */     d d1 = b.ad.d[paramInt1][paramInt2];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3037 */     l l1 = l.u();
/* 3038 */     b b = l1.bt;
/*      */     
/* 3040 */     boolean bool1 = false;
/*      */     
/* 3042 */     if (l1.by.renderFancyWater)
/*      */     {
/* 3044 */       bool1 = true;
/*      */     }
/*      */     
/* 3047 */     if (l.v() || l.w())
/*      */     {
/* 3049 */       bool1 = true;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3059 */     if (bool1) {
/*      */ 
/*      */ 
/*      */       
/* 3063 */       paraml.a(0, PorterDuff.Mode.CLEAR);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     }
/*      */     else {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3080 */       boolean bool = false;
/*      */ 
/*      */       
/* 3083 */       if (l.v())
/*      */       {
/* 3085 */         bool = true;
/*      */       }
/*      */       
/* 3088 */       if (l.aH)
/*      */       {
/* 3090 */         bool = true;
/*      */       }
/*      */       
/* 3093 */       if (f.bw);
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3098 */       if (b.A);
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3103 */       if (bool)
/*      */       {
/* 3105 */         paraml.b(-16777216);
/*      */       }
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/* 3111 */     if (l.aH)
/*      */     {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3122 */       paraml.a(0, PorterDuff.Mode.CLEAR);
/*      */     }
/*      */ 
/*      */ 
/*      */     
/* 3127 */     int i = this.f + paramInt1 * this.k;
/* 3128 */     int j = this.g + paramInt2 * this.k;
/*      */ 
/*      */     
/* 3131 */     boolean bool2 = true;
/* 3132 */     boolean bool3 = false;
/*      */     
/* 3134 */     boolean bool4 = true;
/* 3135 */     boolean bool5 = false;
/*      */ 
/*      */     
/* 3138 */     boolean bool6 = false;
/* 3139 */     boolean bool7 = false;
/*      */ 
/*      */ 
/*      */     
/* 3143 */     if (!b.r.w)
/*      */     {
/* 3145 */       bool6 = true;
/*      */     }
/* 3147 */     if (b.A)
/*      */     {
/* 3149 */       bool7 = true;
/*      */     }
/*      */ 
/*      */     
/* 3153 */     if (bool6)
/*      */     {
/* 3155 */       paraml.a(true);
/*      */     }
/*      */     
/* 3158 */     b.r.a(paraml, i, j, i, j, this.i, this.i, this.m, this.m, b.A, false, false);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3167 */     if (b.s != null) {
/*      */       
/* 3169 */       if (bool6 && b.s.w) {
/*      */         
/* 3171 */         paraml.e();
/*      */ 
/*      */ 
/*      */         
/* 3175 */         l.d("Ending blit early");
/*      */       } 
/*      */ 
/*      */       
/* 3179 */       b.s.a(paraml, i, j, i, j, this.i, this.i, this.m, this.m, b.A, false, false);
/*      */     } 
/*      */     
/* 3182 */     for (e e1 : b.v) {
/*      */       
/* 3184 */       if (e1.m) {
/*      */         
/* 3186 */         if (bool6 && e1.w) {
/*      */           
/* 3188 */           paraml.e();
/*      */ 
/*      */ 
/*      */           
/* 3192 */           l.d("Ending blit early");
/*      */         } 
/*      */ 
/*      */         
/* 3196 */         e1.a(paraml, i, j, i, j, this.i, this.i, this.m, this.m, b.A, false, false);
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/* 3202 */     a(paramInt1, paramInt2, paraml);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3212 */     if (b.A) {
/*      */       
/* 3214 */       if (bool7)
/*      */       {
/* 3216 */         paraml.a(false);
/*      */       }
/*      */       
/* 3219 */       b.r.a(paraml, i, j, i, j, this.i, this.i, this.m, this.m, b.A, true, true);
/*      */     } 
/*      */     
/* 3222 */     if (bool6 || bool7)
/*      */     {
/* 3224 */       paraml.e();
/*      */     }
/*      */ 
/*      */     
/* 3228 */     if (l1.bA.D())
/*      */     {
/* 3230 */       b(paramInt1, paramInt2, paraml);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3241 */     d1.k = false;
/* 3242 */     d1.l = false;
/* 3243 */     d1.m = 0;
/* 3244 */     d1.n = false;
/*      */     
/* 3246 */     paraml.m();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3260 */     if (bool1 || l.aG)
/*      */     {
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3266 */       d1.a.a(0, PorterDuff.Mode.CLEAR);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3279 */     d1.a.b(this.b, 0.0F, 0.0F, null);
/*      */     
/* 3281 */     d1.d.o();
/*      */ 
/*      */     
/* 3284 */     if (b.c)
/*      */     {
/* 3286 */       d1.a.a("" + d1.c, 40.0F, 40.0F, b.e);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3292 */     d1.c++;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void d() {
/* 3312 */     if (l.aF && !l.aH && !l.aI) {
/*      */       return;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3319 */     l l1 = l.u();
/*      */ 
/*      */     
/* 3322 */     int i = Math.max((int)l1.cm, (int)l1.co) + 3;
/*      */ 
/*      */ 
/*      */     
/* 3326 */     if (this.d != null)
/*      */     {
/*      */ 
/*      */ 
/*      */       
/* 3331 */       if (this.h * this.a < i + this.h + 1) {
/*      */         
/* 3333 */         l.b("map", "screen must have changed size, layerBufferSize too small at " + this.a + ", adding to LayerBitmapBuffer");
/* 3334 */         l.b("map", "new viewpoint:" + l1.cm + ", " + l1.co);
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 3339 */         c(this.a + 1);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3346 */     if (this.d == null) {
/*      */ 
/*      */       
/* 3349 */       l.b("map", "setupLayerBuffers for size:" + i);
/*      */ 
/*      */ 
/*      */       
/* 3353 */       long l2 = System.nanoTime();
/*      */ 
/*      */       
/* 3356 */       if (l.aH || l.aI) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 3374 */         this.h = 1024;
/*      */ 
/*      */         
/* 3377 */         this.a = (int)(i / this.h + 1.5F);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       }
/*      */       else {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 3391 */         i = Math.max(600, i);
/*      */ 
/*      */ 
/*      */         
/* 3395 */         this.h = i / (this.a - 2) + 7 + 4;
/*      */ 
/*      */         
/* 3398 */         byte b = 20;
/* 3399 */         float f = 1.0F / b;
/*      */ 
/*      */         
/* 3402 */         this.h = (int)(this.h * f + 0.5F) * b;
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 3407 */       if (this.h * this.a < i + this.h + 1) {
/*      */         
/* 3409 */         l.b("layerBufferSize is too small");
/* 3410 */         l.b("layerBufferCount:" + this.a);
/* 3411 */         l.b("(layerBufferSize*(layerBufferCount):" + (this.h * this.a));
/* 3412 */         l.b("longest+layerBufferSize+1:" + (i + this.h + 1));
/* 3413 */         l.b("longest:" + i);
/*      */         
/* 3415 */         if (l.aH || l.aI) {
/*      */           
/* 3417 */           this.a++;
/*      */         }
/*      */         else {
/*      */           
/* 3421 */           this.h += 100;
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3435 */       l.d("layerBufferSize:" + this.h);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3442 */       this.j = this.h - 4;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3453 */       l.b("layerBuffer:" + this.a + "x" + this.a + " = " + (this.a * this.a) + (b.D ? " x2 for soft fade " : ""));
/*      */       
/* 3455 */       this.d = new d[this.a][this.a];
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3460 */       boolean bool = false;
/*      */       
/* 3462 */       if (l1.by.renderFancyWater)
/*      */       {
/* 3464 */         bool = true;
/*      */       }
/*      */       
/* 3467 */       if (l.v() || l.w())
/*      */       {
/* 3469 */         bool = true;
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3479 */       if (bool) {
/*      */         
/* 3481 */         this.b = l1.bw.a(this.h, this.h, true);
/*      */       }
/*      */       else {
/*      */         
/* 3485 */         this.b = l1.bw.a(this.h, this.h, false);
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3491 */       this.c = l1.bw.a(this.b);
/*      */ 
/*      */       
/* 3494 */       f();
/*      */ 
/*      */       
/* 3497 */       long l3 = System.nanoTime();
/*      */       
/* 3499 */       l.d("----- layerBuffers create in:" + ((l3 - l2) / 1000000.0D) + " ms");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/* 3505 */   int p = 0;
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void c(int paramInt) {
/* 3510 */     if (paramInt < this.a) {
/*      */       
/* 3512 */       l.f("newLayerBufferCount:" + paramInt);
/*      */       
/*      */       return;
/*      */     } 
/* 3516 */     d[][] arrayOfD = new d[paramInt][paramInt];
/*      */     
/* 3518 */     for (byte b = 0; b < this.a; b++) {
/*      */       
/* 3520 */       for (byte b1 = 0; b1 < this.a; b1++)
/*      */       {
/* 3522 */         arrayOfD[b][b1] = this.d[b][b1];
/*      */       }
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/* 3528 */     this.d = arrayOfD;
/* 3529 */     this.a = paramInt;
/*      */ 
/*      */     
/* 3532 */     f();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void e() {
/* 3540 */     b.D = false;
/*      */     
/* 3542 */     for (byte b = 0; b < this.a; b++) {
/*      */       
/* 3544 */       for (byte b1 = 0; b1 < this.a; b1++) {
/*      */         
/* 3546 */         d d1 = this.d[b][b1];
/* 3547 */         if (d1 != null) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 3552 */           if (d1.f != null) {
/*      */             
/* 3554 */             d1.f.n();
/* 3555 */             d1.f = null;
/*      */           } 
/*      */           
/* 3558 */           if (d1.e != null) {
/*      */             
/* 3560 */             d1.e.n();
/* 3561 */             d1.e = null;
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void f() {
/* 3571 */     l l1 = l.u();
/*      */     
/* 3573 */     ArrayList<d> arrayList = null;
/*      */ 
/*      */     
/* 3576 */     for (byte b = 0; b < this.a; b++) {
/*      */       
/* 3578 */       for (byte b1 = 0; b1 < this.a; b1++) {
/*      */ 
/*      */         
/* 3581 */         d d1 = this.d[b][b1];
/*      */         
/* 3583 */         if (d1 == null) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 3588 */           d1 = new d(this, b, b1);
/*      */           
/* 3590 */           d1.b = this.p;
/* 3591 */           this.p++;
/*      */           
/* 3593 */           this.d[b][b1] = d1;
/*      */           
/* 3595 */           if (l1.by.renderFancyWater) {
/*      */             
/* 3597 */             d1.d = l1.bw.a(this.h, this.h, true);
/*      */           }
/*      */           else {
/*      */             
/* 3601 */             d1.d = l1.bw.a(this.h, this.h, false);
/*      */           } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 3609 */           d1.a = l1.bw.a(d1.d);
/*      */ 
/*      */           
/* 3612 */           if (arrayList == null)
/*      */           {
/* 3614 */             arrayList = new ArrayList();
/*      */           }
/* 3616 */           arrayList.add(d1);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3629 */     if (arrayList != null)
/*      */     {
/* 3631 */       for (d d1 : arrayList) {
/*      */ 
/*      */         
/* 3634 */         if (b.D) {
/*      */           
/*      */           try {
/*      */             
/* 3638 */             d1.a();
/*      */           }
/* 3640 */           catch (OutOfMemoryError outOfMemoryError) {
/*      */             
/* 3642 */             outOfMemoryError.printStackTrace();
/*      */             
/* 3644 */             b.E = true;
/*      */             
/* 3646 */             e();
/*      */             
/* 3648 */             l.b("Not enough free memory to enable smooth fog fading");
/* 3649 */             System.gc();
/*      */ 
/*      */             
/*      */             break;
/*      */           } 
/*      */         }
/*      */       } 
/*      */     }
/*      */     
/* 3658 */     a();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp float g() {
/* 3665 */     l l1 = l.u();
/*      */     
/* 3667 */     if (l1.cE > 1.0F)
/*      */     {
/* 3669 */       return 1.0F;
/*      */     }
/*      */     
/* 3672 */     return l1.cE;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp void a(float paramFloat) {
/* 3678 */     l l1 = l.u();
/* 3679 */     b b = l1.bt;
/*      */     
/* 3681 */     Long long_ = null;
/*      */     
/* 3683 */     boolean bool1 = false;
/*      */     
/* 3685 */     float f1 = g();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3699 */     boolean bool2 = false;
/*      */     
/* 3701 */     float f2 = f1 / this.m;
/* 3702 */     if (f.c(f2 - 1.0F) < 0.01F)
/*      */     {
/* 3704 */       f2 = 1.0F;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3712 */     if (f1 > 0.6D) {
/*      */       
/* 3714 */       float f = 0.3F;
/*      */       
/* 3716 */       if (l.al())
/*      */       {
/* 3718 */         f = 0.1F;
/*      */       }
/*      */       
/* 3721 */       if (f1 - this.m > f)
/*      */       {
/* 3723 */         bool2 = true;
/*      */       }
/*      */       
/* 3726 */       if (f1 == 1.0F && this.m != 1.0F)
/*      */       {
/* 3728 */         bool2 = true;
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/* 3733 */     if (f2 != 1.0F) {
/*      */       
/* 3735 */       byte b3 = 10;
/* 3736 */       float f9 = 0.03F;
/* 3737 */       float f10 = 0.03F;
/*      */       
/* 3739 */       if (f1 < 0.3F) {
/*      */         
/* 3741 */         b3 = 20;
/* 3742 */         f9 = 0.09F;
/*      */       }
/* 3744 */       else if (f1 < 0.5F) {
/*      */         
/* 3746 */         b3 = 20;
/* 3747 */         f9 = 0.07F;
/*      */       } 
/*      */       
/* 3750 */       if (f1 > 1.3F)
/*      */       {
/* 3752 */         b3 = 7;
/*      */       }
/*      */ 
/*      */       
/* 3756 */       if (!l.al())
/*      */       {
/*      */         
/* 3759 */         b3 += 10;
/*      */       }
/*      */       
/* 3762 */       if (f.c(b.ab - f1) > f10) {
/*      */         
/* 3764 */         b.ab = l1.cE;
/* 3765 */         b.ac = 0;
/*      */       }
/*      */       else {
/*      */         
/* 3769 */         b.ac++;
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 3774 */       if (b.ac < 3) {
/*      */ 
/*      */         
/* 3777 */         b.aa = 0.0F;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       }
/* 3787 */       else if (f.c(f1 - this.m) > f9) {
/*      */         
/* 3789 */         b.aa++;
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3843 */       if (b.aa > b3) {
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 3848 */         b.aa = 0.0F;
/* 3849 */         bool2 = true;
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3864 */     if (l1.cb + l1.ch + 4.0F > (this.f + this.a * this.k)) {
/*      */       
/* 3866 */       this.f += this.k;
/* 3867 */       b(1);
/*      */     } 
/* 3869 */     if (l1.cb - 1 < this.f) {
/*      */       
/* 3871 */       this.f -= this.k;
/* 3872 */       b(-1);
/*      */     } 
/* 3874 */     if (l1.cc + l1.ci + 4.0F > (this.g + this.a * this.k)) {
/*      */       
/* 3876 */       this.g += this.k;
/* 3877 */       a(1);
/*      */     } 
/* 3879 */     if (l1.cc - 1 < this.g) {
/*      */       
/* 3881 */       this.g -= this.k;
/* 3882 */       a(-1);
/*      */     } 
/*      */     
/* 3885 */     if (l1.cb + l1.ch + 4.0F > (this.f + this.a * this.k))
/*      */     {
/* 3887 */       bool2 = true;
/*      */     }
/* 3889 */     if (l1.cb - 1 < this.f)
/*      */     {
/* 3891 */       bool2 = true;
/*      */     }
/* 3893 */     if (l1.cc + l1.ci + 4.0F > (this.g + this.a * this.k))
/*      */     {
/* 3895 */       bool2 = true;
/*      */     }
/* 3897 */     if (l1.cc - 1 < this.g)
/*      */     {
/* 3899 */       bool2 = true;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3905 */     if (bool2)
/*      */     {
/* 3907 */       a();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3919 */     f2 = l1.cE / this.m;
/* 3920 */     if (f.c(f2 - 1.0F) < 1.0E-4F)
/*      */     {
/* 3922 */       f2 = 1.0F;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3935 */     float f3 = l1.cm / f2 + 2.0F;
/* 3936 */     float f4 = l1.co / f2 + 2.0F;
/*      */ 
/*      */ 
/*      */     
/* 3940 */     if (f2 != 1.0F) {
/*      */       
/* 3942 */       l1.bw.j();
/*      */ 
/*      */       
/* 3945 */       l1.bw.a(f2, f2);
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 3950 */       b.ag.a(l1.cr);
/*      */       
/* 3952 */       b.ag.c = (int)(b.ag.a + b.ag.b() / f2) + 2;
/* 3953 */       b.ag.d = (int)(b.ag.b + b.ag.c() / f2) + 2;
/*      */       
/* 3955 */       l1.bw.a(b.ag);
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/* 3960 */     float f5 = (this.f - l1.cd) * this.m;
/* 3961 */     float f6 = (this.g - l1.ce) * this.m;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3968 */     float f7 = (int)f5;
/* 3969 */     float f8 = (int)f6;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3980 */     byte b1 = 0;
/*      */ 
/*      */     
/* 3983 */     boolean bool3 = false;
/*      */ 
/*      */     
/* 3986 */     if (l.al())
/*      */     {
/* 3988 */       if (l1.cE < 0.3D)
/*      */       {
/* 3990 */         bool3 = true;
/*      */       }
/*      */     }
/*      */     
/* 3994 */     this.e.a(bool3);
/*      */     
/* 3996 */     this.e.d(bool3);
/* 3997 */     this.e.b(bool3);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4015 */     for (byte b2 = 0; b2 < this.a; b2++) {
/*      */       
/* 4017 */       for (byte b3 = 0; b3 < this.a; b3++) {
/*      */         
/* 4019 */         d d1 = this.d[b2][b3];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 4027 */         int i = (int)(f7 + (b2 * this.k) * this.m);
/* 4028 */         int j = (int)(f8 + (b3 * this.k) * this.m);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 4034 */         if (d1.l)
/*      */         {
/* 4036 */           if (!this.n)
/*      */           {
/* 4038 */             d1.m++;
/*      */           }
/*      */         }
/*      */         
/* 4042 */         d1.p.a(i + 1, j + 1, i + this.h - 2, j + this.h - 2);
/*      */         
/* 4044 */         if (d1.p.a <= f3 && d1.p.b <= f4) {
/*      */ 
/*      */ 
/*      */           
/* 4048 */           if (d1.p.c > f3)
/*      */           {
/* 4050 */             d1.p.c = (int)f3;
/*      */           }
/*      */           
/* 4053 */           if (d1.p.d > f4)
/*      */           {
/* 4055 */             d1.p.d = (int)f4;
/*      */           }
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 4061 */           int k = (int)((0.0F - l1.cd) * this.m);
/* 4062 */           int m = (int)((0.0F - l1.ce) * this.m);
/*      */           
/* 4064 */           int n = (int)((b.f() - l1.cd) * this.m);
/* 4065 */           int i1 = (int)((b.g() - l1.ce) * this.m);
/*      */ 
/*      */           
/* 4068 */           if (d1.p.a < k)
/*      */           {
/* 4070 */             d1.p.a = k;
/*      */           }
/*      */           
/* 4073 */           if (d1.p.b < m)
/*      */           {
/* 4075 */             d1.p.b = m;
/*      */           }
/*      */           
/* 4078 */           if (d1.p.c > n)
/*      */           {
/* 4080 */             d1.p.c = n;
/*      */           }
/*      */           
/* 4083 */           if (d1.p.d > i1)
/*      */           {
/* 4085 */             d1.p.d = i1;
/*      */           }
/*      */           
/* 4088 */           if (!d1.p.a()) {
/*      */ 
/*      */             
/* 4091 */             boolean bool4 = false;
/* 4092 */             boolean bool5 = true;
/*      */ 
/*      */             
/* 4095 */             if (d1.k) {
/*      */               
/* 4097 */               bool4 = true;
/* 4098 */               bool5 = false;
/*      */             } 
/*      */             
/* 4101 */             if (d1.l) {
/*      */ 
/*      */ 
/*      */               
/* 4105 */               byte b4 = 10;
/* 4106 */               if (b1 > 3)
/*      */               {
/* 4108 */                 b4 += 2;
/*      */               }
/* 4110 */               if (b1 > 6)
/*      */               {
/* 4112 */                 b4 += 2;
/*      */               }
/*      */ 
/*      */               
/* 4116 */               if (d1.m > b4) {
/*      */                 
/* 4118 */                 d1.m = 0;
/* 4119 */                 bool4 = true;
/*      */                 
/* 4121 */                 b1++;
/*      */               } 
/*      */             } 
/*      */ 
/*      */ 
/*      */             
/* 4127 */             if (bool4) {
/*      */               
/* 4129 */               bool1 = true;
/*      */               
/* 4131 */               boolean bool = false;
/*      */               
/* 4133 */               long l2 = bj.a();
/*      */               
/* 4135 */               if (long_ == null) {
/*      */                 
/* 4137 */                 long_ = Long.valueOf(l2);
/*      */               }
/*      */               else {
/*      */                 
/* 4141 */                 char c1 = 'È';
/* 4142 */                 if (this.n)
/*      */                 {
/* 4144 */                   c1 = '\036';
/*      */                 }
/* 4146 */                 if (bj.a(long_.longValue(), l2) > c1) {
/*      */                   
/* 4148 */                   bool = true;
/* 4149 */                   this.n = true;
/*      */                 } 
/*      */               } 
/* 4152 */               if (bool)
/*      */               {
/* 4154 */                 if (d1.k)
/*      */                 {
/* 4156 */                   if (!d1.n)
/*      */                   {
/*      */                     
/* 4159 */                     b(b2, b3);
/*      */                   }
/*      */                 }
/*      */               }
/*      */               
/* 4164 */               if (!bool) {
/*      */ 
/*      */ 
/*      */ 
/*      */                 
/* 4169 */                 if (b.D) {
/*      */                   
/* 4171 */                   if (d1.e != null)
/*      */                   {
/* 4173 */                     if (d1.e.k != d1.d.k) {
/*      */                       
/* 4175 */                       l.d("wrong sized fadeOutBitmap width:" + d1.e.k + " vs " + d1.d.k);
/* 4176 */                       d1.e.n();
/* 4177 */                       d1.e = null;
/*      */                     } 
/*      */                   }
/*      */                   
/* 4181 */                   if (d1.e == null) {
/*      */ 
/*      */                     
/*      */                     try {
/*      */ 
/*      */                       
/* 4187 */                       d1.a();
/*      */                     }
/* 4189 */                     catch (OutOfMemoryError outOfMemoryError) {
/*      */                       
/* 4191 */                       outOfMemoryError.printStackTrace();
/* 4192 */                       l.a(u.b, outOfMemoryError);
/*      */ 
/*      */                       
/* 4195 */                       e();
/* 4196 */                       l.b("Not enough free memory to keep smooth fog fading");
/* 4197 */                       System.gc();
/*      */                     } 
/*      */                     
/* 4200 */                     if (b.D && d1.e == null) {
/*      */ 
/*      */                       
/* 4203 */                       l1.h("Disabling smooth fog fading due to error");
/* 4204 */                       e();
/* 4205 */                       l.b("fadeOutBitmap == null");
/* 4206 */                       System.gc();
/*      */                     } 
/*      */                   } 
/*      */                 } 
/*      */ 
/*      */                 
/* 4212 */                 if (b.D) {
/*      */ 
/*      */                   
/* 4215 */                   if (d1.g > 0.0F);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                   
/* 4223 */                   e e1 = d1.d;
/* 4224 */                   d1.d = d1.e;
/* 4225 */                   d1.e = e1;
/*      */ 
/*      */                   
/* 4228 */                   l l3 = d1.a;
/* 4229 */                   d1.a = d1.f;
/* 4230 */                   d1.f = l3;
/*      */ 
/*      */                   
/* 4233 */                   if (bool5)
/*      */                   {
/* 4235 */                     d1.g = 1.0F;
/*      */                   }
/*      */                   else
/*      */                   {
/* 4239 */                     d1.g = 0.0F;
/*      */                   }
/*      */                 
/*      */                 }
/*      */                 else {
/*      */                   
/* 4245 */                   d1.g = 0.0F;
/*      */                 } 
/*      */                 
/* 4248 */                 c(b2, b3);
/*      */                 
/* 4250 */                 if (b.a)
/*      */                 {
/* 4252 */                   bj.a("re-drawTile", l2);
/*      */                 }
/*      */               } 
/*      */             } 
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 4260 */             d1.o.a(d1.p);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 4266 */             d1.o.a(-i, -j);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 4277 */             d1.q.a(d1.p);
/* 4278 */             d1.q.a(-f7, -f8);
/* 4279 */             d1.q.a(f5, f6);
/*      */ 
/*      */             
/* 4282 */             if (d1.g > 0.0F) {
/*      */ 
/*      */               
/* 4285 */               d1.h.a(bool3);
/* 4286 */               d1.h.c((int)((1.0F - d1.g) * 255.0F));
/*      */ 
/*      */               
/* 4289 */               l1.bw.a(d1.e, d1.o, d1.q, this.e);
/*      */               
/* 4291 */               if (d1.g < 0.98D)
/*      */               {
/* 4293 */                 l1.bw.a(d1.d, d1.o, d1.q, d1.h);
/*      */               }
/*      */ 
/*      */               
/* 4297 */               d1.g -= 0.1F * paramFloat;
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*      */             }
/*      */             else {
/*      */ 
/*      */ 
/*      */ 
/*      */               
/* 4308 */               l1.bw.a(d1.d, d1.o, d1.q, this.e);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4333 */     if (f2 != 1.0F)
/*      */     {
/* 4335 */       l1.bw.k();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4417 */     if (!bool1)
/*      */     {
/* 4419 */       this.n = false;
/*      */     }
/*      */   }
/*      */ }


/* Location:              D:\Rusted Warfare\Rusted Warfare\game-lib.jar!\com\corrodinggames\rts\game\b\c.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */