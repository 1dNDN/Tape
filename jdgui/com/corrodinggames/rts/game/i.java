/*      */ package com.corrodinggames.rts.game;
/*      */ 
/*      */ import android.app.Activity;
/*      */ import android.content.Context;
/*      */ import android.content.pm.PackageInfo;
/*      */ import android.content.pm.PackageManager;
/*      */ import android.graphics.Bitmap;
/*      */ import android.graphics.Canvas;
/*      */ import android.graphics.Color;
/*      */ import android.graphics.Matrix;
/*      */ import android.graphics.Paint;
/*      */ import android.graphics.Rect;
/*      */ import android.graphics.RectF;
/*      */ import android.graphics.Typeface;
/*      */ import android.os.Debug;
/*      */ import android.util.DisplayMetrics;
/*      */ import android.util.Log;
/*      */ import com.corrodinggames.rts.R;
/*      */ import com.corrodinggames.rts.a.d;
/*      */ import com.corrodinggames.rts.a.e;
/*      */ import com.corrodinggames.rts.game.a.a;
/*      */ import com.corrodinggames.rts.game.b.b;
/*      */ import com.corrodinggames.rts.game.b.f;
/*      */ import com.corrodinggames.rts.game.units.af;
/*      */ import com.corrodinggames.rts.game.units.ak;
/*      */ import com.corrodinggames.rts.game.units.al;
/*      */ import com.corrodinggames.rts.game.units.custom.ac;
/*      */ import com.corrodinggames.rts.game.units.custom.k;
/*      */ import com.corrodinggames.rts.game.units.custom.l;
/*      */ import com.corrodinggames.rts.game.units.f.c;
/*      */ import com.corrodinggames.rts.game.units.r;
/*      */ import com.corrodinggames.rts.gameFramework.SettingsEngine;
/*      */ import com.corrodinggames.rts.gameFramework.a;
/*      */ import com.corrodinggames.rts.gameFramework.a.e;
/*      */ import com.corrodinggames.rts.gameFramework.aa;
/*      */ import com.corrodinggames.rts.gameFramework.ac;
/*      */ import com.corrodinggames.rts.gameFramework.am;
/*      */ import com.corrodinggames.rts.gameFramework.b.a;
/*      */ import com.corrodinggames.rts.gameFramework.b.b;
/*      */ import com.corrodinggames.rts.gameFramework.b.c;
/*      */ import com.corrodinggames.rts.gameFramework.b.f;
/*      */ import com.corrodinggames.rts.gameFramework.ba;
/*      */ import com.corrodinggames.rts.gameFramework.be;
/*      */ import com.corrodinggames.rts.gameFramework.bf;
/*      */ import com.corrodinggames.rts.gameFramework.bg;
/*      */ import com.corrodinggames.rts.gameFramework.bj;
/*      */ import com.corrodinggames.rts.gameFramework.bk;
/*      */ import com.corrodinggames.rts.gameFramework.c;
/*      */ import com.corrodinggames.rts.gameFramework.d.f;
/*      */ import com.corrodinggames.rts.gameFramework.d.k;
/*      */ import com.corrodinggames.rts.gameFramework.e.a;
/*      */ import com.corrodinggames.rts.gameFramework.f;
/*      */ import com.corrodinggames.rts.gameFramework.f.a;
/*      */ import com.corrodinggames.rts.gameFramework.g.ad;
/*      */ import com.corrodinggames.rts.gameFramework.h.h;
/*      */ import com.corrodinggames.rts.gameFramework.j;
/*      */ import com.corrodinggames.rts.gameFramework.j.e;
/*      */ import com.corrodinggames.rts.gameFramework.j.f;
/*      */ import com.corrodinggames.rts.gameFramework.j.g;
/*      */ import com.corrodinggames.rts.gameFramework.j.h;
/*      */ import com.corrodinggames.rts.gameFramework.j.k;
/*      */ import com.corrodinggames.rts.gameFramework.j.l;
/*      */ import com.corrodinggames.rts.gameFramework.j.m;
/*      */ import com.corrodinggames.rts.gameFramework.l;
/*      */ import com.corrodinggames.rts.gameFramework.l.a;
/*      */ import com.corrodinggames.rts.gameFramework.s;
/*      */ import com.corrodinggames.rts.gameFramework.utility.o;
/*      */ import com.corrodinggames.rts.gameFramework.utility.q;
/*      */ import com.corrodinggames.rts.gameFramework.utility.r;
/*      */ import com.corrodinggames.rts.gameFramework.utility.s;
/*      */ import com.corrodinggames.rts.gameFramework.utility.y;
/*      */ import com.corrodinggames.rts.gameFramework.w;
/*      */ import com.corrodinggames.rts.gameFramework.y;
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Collections;
/*      */ import java.util.Comparator;
/*      */ import java.util.List;
/*      */ import java.util.Timer;
/*      */ import java.util.concurrent.ConcurrentLinkedQueue;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class i
/*      */   extends l
/*      */ {
/*      */   public static String a;
/*      */   public static boolean b;
/*      */   public static boolean c;
/*      */   int d;
/*      */   public float e;
/*      */   
/*      */   public strictfp i(Context paramContext) {
/*  119 */     super(paramContext);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  143 */     this.e = 1.0F;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  157 */     this.h = new j[6];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  265 */     this.k = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  275 */     this.l = 0;
/*      */ 
/*      */ 
/*      */     
/*  279 */     this.m = new ConcurrentLinkedQueue();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  299 */     this.s = 0;
/*  300 */     this.t = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  309 */     this.u = 0;
/*  310 */     this.v = 16.0F;
/*      */ 
/*      */     
/*  313 */     this.w = "0fps";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  326 */     this.x = new Object();
/*  327 */     this.y = new Object();
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  332 */     this.z = new Rect();
/*      */ 
/*      */     
/*  335 */     this.A = new ArrayList();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  344 */     this.E = new Paint();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  350 */     this.H = new b();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1933 */     this.J = 0.0F;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2846 */     this.K = 1.0F;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3219 */     this.Q = 0.0F;
/*      */     
/* 3221 */     this.R = new Rect();
/* 3222 */     this.S = new RectF();
/*      */ 
/*      */     
/* 3225 */     this.T = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3261 */     this.U = new s("allOnScreenObjects");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3781 */     this.V = new Matrix();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3896 */     this.W = new ArrayList();
/*      */ 
/*      */     
/* 3899 */     this.X = new ArrayList();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4277 */     this.aa = new Object();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4418 */     this.ab = 0;
/*      */   }
/*      */   public static String f = null;
/*      */   public h g;
/*      */   j[] h;
/* 4423 */   int i; String j; public boolean k; public int l; public ConcurrentLinkedQueue m; Paint n; Paint o; Paint p; Paint q; Paint r; int s; int t; int u; float v; public String w; public Object x; public Object y; Rect z; public ArrayList A; Paint B; Paint C; Paint D; public Paint E; public bf F; public be G; public b H; a I; float J; public float K; public float L; public float M; e N; e O; e P; float Q; Rect R; RectF S; public e T; final s U; Matrix V; public ArrayList W; public ArrayList X; Timer Y; boolean Z; Object aa; int ab; af ac; af ad; float ae; boolean af; public strictfp boolean a() { if (this.bA.p) return true;  if (this.do != null) if (this.do.b()) return true;   return false; } public strictfp boolean a(boolean paramBoolean) { if (!paramBoolean || this.bJ.h()) { if (this.bA.p) return true;  if (this.aZ) return true;  if (this.al && !this.bq) return true;  if (this.bo) if (this.do != null && this.do.b()) return true;   }  if (paramBoolean) if (!this.bF.bf) return true;   if (this.bF.C()) return true;  return false; } public strictfp int b() { return this.u; } public synchronized strictfp void a(Context paramContext) { Log.d("RustedWarfare", "--- ----------------- ----"); Log.d("RustedWarfare", "--- GameEngine:init() ----"); Log.d("RustedWarfare", "--- ----------------- ----"); if (this.aS) { Log.d("RustedWarfare", "GameEngine init has already been called"); return; }  if (v()) if (getClass().equals(i.class)) throw new RuntimeException("inSpace but class is:" + getClass());   System.gc(); g("Asset Index"); this.bs = new com.corrodinggames.rts.gameFramework.utility.i(paramContext); long l1 = bj.a(); this.bL = new bj(this); this.bL.a(bk.C); if (aF) { this.bP = 1.0F; } else { DisplayMetrics displayMetrics = paramContext.e().getDisplayMetrics(); this.bP = (paramContext.e().getDisplayMetrics()).density; l.d("densityScaleRaw: " + this.bP); a(displayMetrics.widthPixels, displayMetrics.heightPixels); }  this.bP *= this.e; l.d("densityScaleRaw*densityScaleMultiplier: " + this.bP); if (l.b(paramContext)) this.am = true;  this.I = new b(); this.aY = false; g("InputController"); this.bB = new ac(); this.bB.a(); g("SettingsEngine"); this.by = SettingsEngine.getInstance(paramContext); this.bQ = O(); l.d("densityScale(): " + this.bQ); long l2 = bj.a(); a.a(); bj.a("Locale.init took:", l2); m.G(); this.n = new Paint(); this.o = new Paint(); this.o.a(255, 255, 255, 255); this.o.a(true); a(this.o, 16.0F); this.p = new Paint(); this.p.a(255, 255, 255, 255); this.p.a(true); a(this.p, 16.0F); this.q = new Paint(); this.q.a(100, 255, 0, 0); a(this.q, 16.0F); this.r = new Paint(); this.r.a(100, 0, 255, 0); a(this.r, 16.0F); this.cU = new Paint(); this.cV = new Paint(); this.cV.a(Paint.Align.b); this.cV.a(true); this.cV.a(Typeface.a(Typeface.c, 0)); a(this.cV, 16.0F); this.cW = new Paint(); this.cW.a(255, 230, 255, 230); this.cW.a(true); this.cW.a(Paint.Align.b); a(this.cW, 18.0F); this.B = new Paint(); this.B.b(-1); this.B.c(100); this.C = new Paint(); this.C.b(-7829368); this.C.c(240); this.C.a(Paint.Style.b); this.C.a(1.0F); long l3 = bj.a(); g("AudioEngine"); e.b(); this.bu = new e(); this.bu.a(paramContext); bj.a("AudioEngine took:", l3); g("MusicController"); this.bv = new am(); this.bv.a(paramContext); if (aR != null) { d("init(): using Graphics instance"); this.bw = aR; } else if (aQ != null) { d("init(): using GraphicsSlick2d"); try { this.bw = aQ.newInstance(); } catch (InstantiationException instantiationException) { throw new RuntimeException(instantiationException); } catch (IllegalAccessException illegalAccessException) { throw new RuntimeException(illegalAccessException); }  } else if (aF) { this.bw = (l)new m(); } else { this.bw = (l)new k(); }  g("graphics.init"); this.bw.a(paramContext); this.bw.b(); j.a(); g("Fonts"); Q(); g("effects.init"); this.bz = new c(); this.bz.a(paramContext); g("minimapHandler"); this.bE = new k(); this.bE.a(paramContext); if (bR != null) { l.d("We have an initial screen size, can do early setup of image buffers"); g("Map Buffers"); b(bR.a, bR.b); g(); b.c(); this.bE.e(); }  g("PathEngine"); this.bC = new h(); g("GroupController"); this.bD = new aa(); g("CollisionEngine"); this.bx = new a(); g("InterfaceEngine"); this.bA = new f(); this.bA.a(paramContext); this.G = be.c(paramContext); g("NetworkEngine"); this.bF = new ad(); this.bF.y(); g("StatsHandler"); this.bG = new bg(); g("ModEngine"); this.bH = new a(); this.bH.a(); g("CommandController"); this.bN = new c(); g("GameSaver"); this.bI = new y(); g("ReplayEngine"); this.bJ = new ba(); this.bJ.a(paramContext); g("UnitGeoIndex"); this.bK = new c(); g("Precalculating map fog"); b.a(); g("ScorchMark.load"); k.b(); g("Projectile.load"); f.c(); g("Emitter.load"); f.b(); g("Unit.loadAllUnits"); long l4 = bj.a(); af.bv(); bj.a("loadAllUnits took:", l4); g("Loading custom unit data"); long l5 = bj.a(); ac.f(); g("getAllUnitsChecksum"); bj.a("CustomUnits took:", l5); long l6 = bj.a(); this.d = af.bA(); bj.a("allUnitsChecksum took:", l6); this.D = new Paint(); this.D.a(50, 255, 255, 255); y(); System.gc(); this.aS = true; l.d("Init completed"); bj.a("Loading took:", l1); this.bL.b(bk.C); this.bL.a(true, true); long l7 = bj.a(); g("Loading map data"); if (!l.as) q();  bj.a("loadAMenuMap took:", l7); af(); g("init complete"); if (aw) { ak.s(); System.exit(0); }  if (ax) { ak.r(); System.exit(0); }  this.aT = true; } public strictfp void a(int paramInt1, int paramInt2) { float f1 = 1.0F; float f2 = f.b(0.0F, 0.0F, paramInt1, paramInt2); float f3 = 1131.0F; f1 = f2 / f3; l.d("defaultViewpointZoomDensity: " + f1); if (f1 < 0.5F) f1 = 0.5F;  if (f1 > 3.0F) f1 = 3.0F;  l.d("defaultViewpointZoomDensity after limit: " + f1); this.cF = 1.0F; if (f.c(f1 - 1.0F) > 0.1D) { this.cF = f1; if (this.cF > 2.0F) this.cF = 2.0F;  if (this.cF < 0.5F) this.cF = 0.5F;  this.cE = this.cC * this.cF; }  } public strictfp void c() { D(); d(); } public strictfp void d() { b(false); this.bp = false; this.bq = false; this.bo = false; this.aZ = false; this.bA.p = false; } public synchronized strictfp void a(boolean paramBoolean, s params) { D(); a(paramBoolean, false, params); } public synchronized strictfp void q() { if (this.ab > 20) {
/*      */       return;
/*      */     }
/*      */ 
/*      */ 
/*      */     
/* 4429 */     byte b1 = 3;
/*      */     
/* 4431 */     int k = this.by.nextBackgroundMap;
/*      */ 
/*      */ 
/*      */     
/* 4435 */     this.by.nextBackgroundMap++;
/* 4436 */     if (this.by.nextBackgroundMap > 3)
/*      */     {
/* 4438 */       this.by.nextBackgroundMap = 1;
/*      */     }
/* 4440 */     this.by.save();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4451 */     k = f.b(k, 1, 3);
/* 4452 */     this.cT = null;
/* 4453 */     this.cS = "maps/menu_background/menu" + k + ".tmx";
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/* 4458 */       m.b(10, true);
/*      */     }
/* 4460 */     catch (IOException iOException) {
/*      */       
/* 4462 */       throw new RuntimeException(iOException);
/*      */     } 
/*      */     
/* 4465 */     for (byte b2 = 0; b2 < m.a; b2++) {
/*      */       
/* 4467 */       a a1 = new a(b2);
/* 4468 */       if (b2 == 0)
/*      */       {
/* 4470 */         this.bb = (m)a1;
/*      */       }
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4482 */     a(false, s.a);
/* 4483 */     this.bq = true;
/*      */     
/* 4485 */     this.bA.w();
/*      */     
/* 4487 */     if (!this.bp)
/*      */     
/* 4489 */     { l.f("Menu load failed");
/* 4490 */       this.ab++; }  }
/*      */   public strictfp void a(boolean paramBoolean1, boolean paramBoolean2, s params) { b(paramBoolean2); this.aY = false; System.gc(); this.br = true; this.bp = false; this.aZ = false; this.bo = false; this.bh = 0; this.bO = false; this.bF.a(1L); this.bg = 0; f.a(); this.bF.p(); if (!paramBoolean2) { this.cX = false; this.cY = false; this.cZ = 0.0F; this.db = false; this.da = false; }  this.l = 0; if (!paramBoolean2) this.cC = 1.0F;  this.de = 0.0F; if (!this.bJ.h()) if (!this.bF.z) { ac.b(true); } else { ac.c(); }   if (!this.bF.z) { if (!this.bJ.h()) if (paramBoolean1) { this.bb = new e(0); this.bb.q = "Player"; for (byte b1 = 1; b1 < 8; b1++) new a(b1);  this.bF.ah(); }   } else { this.bb = this.bF.x; if (this.bb == null) throw new RuntimeException("cannot find player's team");  if (this.bb != m.n(this.bb.i)) l.f("Stale playerTeam");  }  this.bM = null; this.bt = new b(); try { if (this.cT != null) { InputStream inputStream = this.cT.u(); try { inputStream.reset(); } catch (IOException iOException) { iOException.printStackTrace(); }  this.bt.a(inputStream, paramBoolean2); } else { this.bt.a(ab(), paramBoolean2); }  } catch (f f) { f.printStackTrace(); a("Error loading map: " + f.getMessage(), 1); if (aE) { l.d("Crashing on allowed map error because automated testing is active"); throw new RuntimeException(f); }  if (!this.bF.z) if (this.aj != null) { e e1 = this.aj.k(); if (e1 != null) e1.k();  }   String str = a((Throwable)f); e("Map Load Warning", str); this.br = false; return; }  if (!this.bt.P) { d("map did not load, returning"); this.br = false; return; }  this.bl = this.by.teamUnitCapSinglePlayer; if (this.bl < 1) this.bl = 1;  this.bk = this.bl; this.bt.C = false; if (!paramBoolean2) l.D();  if (!this.bF.z && !this.bJ.h()) this.bF.aH.h = 1.0F;  if (this.bF.z) { if (!this.bF.D) { this.bk = this.bF.aF; this.bl = this.bF.aG; }  l.d("Unit cap is now: " + this.bl); if (this.bF.aH.d == 0) { this.bt.A = false; this.bt.B = false; } else if (this.bF.aH.d == 1) { this.bt.A = true; this.bt.B = false; } else if (this.bF.aH.d == 2) { this.bt.A = true; this.bt.B = true; }  this.bt.C = this.bF.aH.e; byte b1 = 10; if (this.bF.aH.e) b1 = 10;  int k; for (k = 0; k < m.a; k++) { m m = m.n(k); if (m != null) if (m.C == null) { l.d("Fog null for team: " + m.i); } else { for (byte b3 = 0; b3 < this.bt.y; b3++) { for (byte b4 = 0; b4 < this.bt.z; b4++) m.C[b3][b4] = b1;  }  }   }  k = this.bF.i(); for (byte b2 = 0; b2 < m.a; b2++) { m m = m.n(b2); if (m != null) { m.m = k; if (m.r) m.s = this.bF.aH.f;  m.y = this.bF.aH.k; boolean bool1 = false; boolean bool2 = false; if (this.bF.aH.g != 1) { boolean bool3 = true; boolean bool4 = true; Float float_1 = null; Float float_2 = null; Float float_3 = null; Float float_4 = null; if (this.bF.aH.g == 5 || this.bF.aH.g == 4 || this.bF.aH.g > 10) bool4 = false;  if (this.bF.aH.g == 5 || this.bF.aH.g == 4 || this.bF.aH.g == 3 || this.bF.aH.g > 10) bool3 = false;  if (this.bF.aH.g == 9) { bool4 = false; bool3 = false; }  for (af af1 : af.bt()) { if (af1 instanceof af) { af af2 = af1; if (!af2.bz && af2.bB == m) { if (af2.bt && !bool1) { bool1 = true; float_1 = Float.valueOf(af2.dH); float_2 = Float.valueOf(af2.dI); if (!bool3) { af2.bU(); continue; }  }  if (af2.bu && !bool2) { bool2 = true; float_3 = Float.valueOf(af2.dH); float_4 = Float.valueOf(af2.dI); if (!bool4) af2.bU();  }  }  }  }  if (float_1 == null) { float_1 = float_3; float_2 = float_4; }  if (float_1 == null) { l.d("placementLocation==null for team:" + m.i); } else { float f1 = float_1.floatValue(); float f2 = float_2.floatValue(); if (this.bF.aH.g == 2) { byte b3; for (b3 = 0; b3 <= 2; b3++) { if (b3 != 1) { af af1 = ak.h.a(); af1.a(m); af1.dH = f1 - 50.0F + (b3 * 50); af1.dI = f2; m.c(af1); }  }  for (b3 = 0; b3 <= 2; b3++) { af af1 = ak.w.a(); af1.a(m); af1.dH = f1 - 50.0F + (b3 * 50); af1.dI = f2 + 50.0F; m.c(af1); }  } else if (this.bF.aH.g == 3 || this.bF.aH.g == 4) { for (byte b3 = 0; b3 <= 2; b3++) { al al = ak.a("combatEngineer"); if (al == null) { ad.f("Could not find: combatEngineer on network.setup.startingUnits==3"); } else { af af1 = al.a(); af1.a(m); af1.dH = f1 - 50.0F + (b3 * 50); af1.dI = f2 + 50.0F; m.c(af1); }  }  } else if (this.bF.aH.g == 5) { al al = ak.a("experimentalSpider"); if (al == null) { ad.f("Could not find: experimentalSpider on network.setup.startingUnits==5"); } else { af af1 = al.a(); af1.a(m); af1.dH = f1; af1.dI = f2; af1.bL = 90.0F; af1.dJ = 2.0F; af1.cK(); m.c(af1); }  } else if (this.bF.aH.g != 9) { if (this.bF.aH.g > 10) { l l1 = l.b(this.bF.aH.g); if (l1 == null) { ad.f("Could not find starting unit on network.setup.startingUnits==" + this.bF.aH.g); } else { af af1 = l1.a(); af1.a(m); af1.dH = f1; af1.dI = f2; if (!af1.bw()) af1.bL = 90.0F;  if (l1.ex) { af1.cK(); if (af1 instanceof k) ((k)af1).dj();  }  m.c(af1); }  }  }  }  }  }  }  }  if (!paramBoolean2) if (this.bM == null || !this.bM.q) { a(0.0F, 0.0F); byte b1 = 0; byte b2 = 0; boolean bool = false; for (af af1 : af.bj) { if (af1 instanceof com.corrodinggames.rts.game.units.ae) { b2++; } else { b1++; }  if (af1.bB == this.bb && af1.bu) { b(af1.dH, af1.dI); bool = true; }  }  if (!bool) for (af af1 : af.bj) { if (af1.bB == this.bb) { if (af1.t() || af1.o_()) continue;  b(af1.dH, af1.dI); }  }   d("there are " + b1 + " units on this map and " + b2 + " trees"); }   this.F = be.c(this.ah).b(ab()); this.bC.a(this.bt, paramBoolean2); this.bE.a(this.bt, paramBoolean2); this.bN.a(); this.bD.a(); if (!paramBoolean2) a.a();  this.bA.a(paramBoolean2); if (!paramBoolean2) { this.bA.w(); at(); if (this.be) this.bA.w();  } else { this.bA.w(); }  this.bK.a(this.bt); if (!paramBoolean2) this.bv.c();  this.bG.a(); for (af af1 : af.bj) { if (af1 instanceof r) { r r = (r)af1; r.c(false); }  }  this.F.e = true; this.G.a(this.ah); this.bp = true; this.bq = false; this.br = false; if (params != s.a) if (!this.by.hasPlayedGameOrSeenHelp) { this.by.hasPlayedGameOrSeenHelp = true; this.by.save(); }   System.gc(); if (!l.aF) { Log.a("RustedWarfare", "getNativeHeapSize" + String.valueOf(Debug.getNativeHeapSize())); Log.a("RustedWarfare", "getNativeHeapAllocatedSize" + String.valueOf(Debug.getNativeHeapAllocatedSize())); Log.a("RustedWarfare", "getNativeHeapFreeSize" + String.valueOf(Debug.getNativeHeapFreeSize())); Log.a("RustedWarfare", "Runtime.getRuntime().maxMemory()" + String.valueOf(Runtime.getRuntime().maxMemory())); }  if (this.cR != null) this.cR.a();  this.J = 0.0F; if (this.bF.D && this.bF.z) { l.d("Disabling network for singleplayer"); this.bF.z = false; }  if (!an()) if (params == s.c) { l.d("Not starting replay recording as we are loading a save"); } else { this.bJ.a(paramBoolean2); }   if (h.j); }
/*      */   private strictfp void at() { this.bA.w(); for (af af1 : af.bj) { if (af1.bB == this.bb && af1 instanceof r) if (af1.ai() && af1.j() && af1.bG() && !af1.o_() && !af1.t()) { l.d("selectAnyOnScreenBuilder: found builder"); this.bA.j(af1); return; }   }  l.d("selectAnyOnScreenBuilder: no builder found"); }
/*      */   public strictfp void b(boolean paramBoolean) { synchronized (this.x) { if (this.aj != null) this.aj.n();  this.ba = false; if (!paramBoolean) this.bJ.f();  this.bC.c(); o o = w.dp(); for (w w : o) w.a();  af.bt(); w.dp(); int k = o.size(); if (k != 0) l.b("SHOULD_NOT_HAPPEN: we still had " + k + " objects in gameObjectListForLogic after removeAll");  this.U.clear(); if (!al()) this.bv.f();  this.bz.a(paramBoolean); if (this.bt != null) { this.bt.e(); this.bt = null; }  if (this.bM != null) this.bM = null;  if (this.bK != null) this.bK.b();  this.ac = null; this.ad = null; this.l = 0; }  }
/*      */   public strictfp void a(float paramFloat, int paramInt) { synchronized (this.x) { b(paramFloat, paramInt); }  }
/*      */   public strictfp void b(float paramFloat, int paramInt) { if (this.bg == 2) { as(); } else if (this.bg % 10000 == 0 && this.bg != 0) { as(); }  ar(); this.dH.a(); this.dI.b(); this.bL.a(bk.a); this.aj = this.ak; if (!this.aj.b()) return;  this.bL.a(bk.b); while (this.m.peek() != null) { Runnable runnable = this.m.poll(); runnable.run(); }  if (!this.bp) { if (this.al) return;  Log.d("RustedWarfare", "game running without a loaded level!!!"); e(); try { Thread.sleep(10L); } catch (InterruptedException interruptedException) { interruptedException.printStackTrace(); }  return; }  this.ba = true; float f = this.cC * this.cF; if (f != this.cE) { float f1 = this.cH / this.cE + this.cf; float f2 = this.cI / this.cE + this.cg; this.cE = f; g(); if (this.cG) { float f3 = this.cH / this.cE + this.cf; float f4 = this.cI / this.cE + this.cg; a(this.cf - f3 - f1, this.cg - f4 - f2); this.cG = false; }  }  if (this.bY != 0.0F || this.bZ != 0.0F) { float f1 = 3.0F * paramFloat; float f2 = 0.0F; if (this.bY > 0.0F) f2 = f.g(this.bY, f1);  if (this.bY < 0.0F) f2 = f.f(this.bY, -f1);  f2 += 0.15F * this.bY; float f3 = 0.0F; if (this.bZ > 0.0F) f3 = f.g(this.bZ, f1);  if (this.bZ < 0.0F) f3 = f.f(this.bZ, -f1);  f3 += 0.15F * this.bZ; if (f.c(this.bY) <= f1) { f2 = this.bY; this.bY = 0.0F; } else { this.bY -= f2; }  if (f.c(this.bZ) <= f1) { f3 = this.bZ; this.bZ = 0.0F; } else { this.bZ -= f3; }  this.cf += f2; this.cg += f3; a(this.cf, this.cg); J(); }  if (this.cy != this.cz) g();  if (paramFloat > 3.0F) paramFloat = 3.0F;  if (paramFloat < 0.0F) paramFloat = 0.0F;  if (this.bd >= 0.0F) paramFloat = this.bd;  this.bj = (int)(this.bj + paramFloat * 16.666666F); d(paramFloat); this.s += paramInt; this.t++; if (this.t >= 40) { if (this.s == 0) this.s = 1;  this.u = (int)((this.t * 1000 / this.s) + 0.5F); this.v = this.s / this.t; this.s = 0; this.t = 0; if (this.by.showFps) this.w = this.u + "fps";  }  aa(); for (byte b1 = 0; b1 < this.dt.length; b1++) this.dt[b1] = true;  this.cO = f.a(this.cO, 0.1F * paramFloat); this.cP = f.a(this.cP, 0.1F * paramFloat); this.cO = f.b(this.cO, 5.0F); this.cP = f.b(this.cP, 5.0F); this.bA.a(paramFloat); J(); b.c(); if (this.bF.z) { float f1 = paramFloat; if (this.bJ.t != 1) f1 *= this.bJ.t;  this.bF.a(f1); if (!a(true)) if (!this.bF.S) { this.J += f1; while (this.J > this.bF.a()) { if (this.bF.C()) { this.bF.S = true; break; }  this.J -= this.bF.a(); this.bF.a(this.bF.a(), false); if (this.bF.S) break;  a(this.bF.a()); }  if (!this.bF.A) { if (this.bF.Z || this.bF.X) { if (this.bF.Z && this.bF.X) if (this.bg < this.bF.R - this.bF.N - 5) { this.bF.c("nearly within frame range"); this.bF.Z = false; }   if (this.bg > this.bF.R - 6) { this.bF.c("we have back within frame range"); this.bF.Z = false; this.bF.X = false; }  }  if (!this.bF.X) if (this.bg < this.bF.R - this.bF.N - 10) { this.bF.c("we are slightly out of frame range, speeding up"); this.bF.X = true; }   if (!this.bF.Z) if (this.bg < this.bF.R - this.bF.N - 30) { this.bF.c("we are out of frame range, fast forwarding"); this.bF.Z = true; }   if (!this.bF.Z && this.bF.X) { this.bF.Y += paramFloat; if (this.bF.Y > this.bF.a() * 3.0F) { this.bF.Y = 0.0F; this.bF.a(this.bF.a(), true); if (!this.bF.S) a(this.bF.a());  }  }  if (this.bF.Z) { this.bF.a(this.bF.a(), true); if (!this.bF.S) a(this.bF.a());  }  if (this.bg < this.bF.R - 90) { this.bF.a(this.bF.a(), true); if (!this.bF.S)
/*      */                 a(this.bF.a());  }  if (this.bg < this.bF.R - 120) { this.bF.a(this.bF.a(), true); if (!this.bF.S)
/*      */                 a(this.bF.a());  }  if (this.bg < this.bF.R - 600) { this.bF.a(this.bF.a(), true); if (!this.bF.S)
/*      */                 a(this.bF.a());  }  }  }   } else if (this.bJ.g()) { float f1 = paramFloat; if (this.bJ.t != 1)
/*      */         f1 *= this.bJ.t;  if (this.bc != 1.0F)
/*      */         f1 *= this.bc;  if (!a(false)) { this.J += f1; while (this.J > this.bF.a()) { this.J -= this.bF.a(); if (this.bF.C())
/*      */             break;  a(this.bF.a()); }  }  if (this.J > 100.0F)
/*      */         this.J = 100.0F;  if (this.J < 0.0F)
/*      */         this.J = 0.0F;  } else if (!a(false)) { a(paramFloat); }  if (a(false))
/*      */       try { Thread.sleep(2L); } catch (Exception exception) {}  this.bC.a(paramFloat); this.bu.b(paramFloat); this.bv.a(paramFloat); this.bB.b(); a.a().a(paramFloat); this.bL.b(bk.b); this.bL.a(bk.c); if (!this.dc)
/*      */       if (this.bw.a()) { a((h)null, paramFloat); } else if (this.aj.p()) { h h1 = this.aj.a(true); a(h1, paramFloat); } else { d d = this.aj; this.aj.a(paramFloat, paramInt); if (d.c() && !d.e())
/*      */           synchronized (d.g()) { if (d.c() && !d.e()) { this.bL.a(bk.w); h h1 = d.a(true); this.bL.b(bk.w); try { if (!d.e()) { if (h1 != null) { if (h1.c())
/*      */                       l.d("gameengine draw: bufferedCanvas drawn on");  h1.a(true); }  if (h1 == null)
/*      */                     l.e("GameEngine gameViewCanvas is null after lockCanvas - " + d.hashCode());  if (this.aY) { if (this.g == null) { b("recorder", "Now recording at:" + this.aj.h() + "," + this.aj.i()); for (byte b2 = 0; b2 < this.h.length; b2++) { this.h[b2] = new j(this); (this.h[b2]).a = Bitmap.a(this.aj.h(), this.aj.i(), Bitmap.Config.b); (this.h[b2]).a.a(0); }  this.g = (h)new g(new Canvas()); this.i = 0; this.j = "/sdcard/rustedWarfare_recordings/" + System.currentTimeMillis() + "/"; File file = new File(this.j); file.mkdirs(); }  long l1 = System.currentTimeMillis(); j j1 = this.h[this.i]; if (j1.d != null && j1.d.isAlive())
/*      */                       j1.d.setPriority(10);  j1.a(); long l2 = System.currentTimeMillis(); b("screenshot", "bitmapFree took:" + (l2 - l1)); this.g.a((this.h[this.i]).a); h1 = this.g; } else { this.g = null; }  a(h1, paramFloat); if (this.aY) { j j1 = this.h[this.i]; if (j1 != null) { j1.b = this.bg; j1.d = new Thread(j1); j1.d.start(); h1.a(j1.a, 0.0F, 0.0F, null); this.i++; if (this.i >= this.h.length)
/*      */                         this.i = 0;  }  }  this.bw.a(null); }  } finally { if (h1 != null)
/*      */                   try { d.a(h1, true); } catch (IllegalArgumentException illegalArgumentException) { illegalArgumentException.printStackTrace(); l.e("GameEngine catch currentGameView - " + d.hashCode()); l.e("GameEngine catch currentGameView.gameThreadSync - " + d.g().hashCode()); d.j(); } catch (IllegalStateException illegalStateException) { illegalStateException.printStackTrace(); l.e("GameEngine catch currentGameView - " + d.hashCode()); l.e("GameEngine catch currentGameView.gameThreadSync - " + d.g().hashCode()); }   }  }  }   this.aj.b(paramFloat, paramInt); }   this.dc = false; R(); this.bL.b(bk.c); if (this.db) { this.db = false; Integer integer = k(this.cS); String str = null; if (integer != null)
/* 4512 */         str = l(this.cS);  if (this.bF.z) { str = null; (new i$a(this)).start(); }  if (str != null) { l.d("gotoNextLevel: Loading next level: " + str); this.cS = str; this.bA.e.b(); a(true, false, s.b); } else { l.d("gotoNextLevel: No next level, finishing"); this.bp = false; e e1 = this.aj.k(); if (e1 != null) { e1.b(); e1.k(); } else { l.d("gotoNextLevel: Error getInGameActivity==null"); }  }  }  if (!this.al && this.bn && !this.k) { d("starting method trace"); Debug.startMethodTracing("lukeTrace", 110000000); this.k = true; }  this.bo = true; this.dJ.a(); this.bL.b(bk.a); this.bL.b(); } strictfp void d(float paramFloat) { if (this.al && !this.bq)
/*      */     
/*      */     { 
/*      */       
/* 4516 */       if (this.ad == null) {
/*      */         
/* 4518 */         this.ad = r();
/*      */         
/* 4520 */         if (this.ac == this.ad)
/*      */         {
/* 4522 */           this.ad = null;
/*      */         }
/*      */       } 
/*      */       
/* 4526 */       if (this.ac == null) {
/*      */         
/* 4528 */         this.ac = this.ad;
/* 4529 */         this.ad = null;
/*      */       } 
/*      */ 
/*      */       
/* 4533 */       if (this.ae != 0.0F && this.ad != null)
/*      */       {
/* 4535 */         a(paramFloat, this.ad.dH, this.ad.dI, this.ae * 0.5F);
/*      */       }
/*      */       
/* 4538 */       if (this.ac != null) {
/*      */         
/* 4540 */         boolean bool = a(paramFloat, this.ac.dH, this.ac.dI, (1.0F - this.ae) * 0.5F);
/*      */         
/* 4542 */         float f = f.a(this.cf + this.cp, this.cg + this.cq, this.ac.dH, this.ac.dI);
/*      */ 
/*      */         
/* 4545 */         if (f < 6400.0F)
/*      */         {
/* 4547 */           bool = true;
/*      */         }
/*      */         
/* 4550 */         if (bool)
/*      */         {
/* 4552 */           this.af = true;
/*      */         }
/*      */       } 
/*      */       
/* 4556 */       if (this.af)
/*      */       
/* 4558 */       { this.ae += 0.01F * paramFloat;
/*      */         
/* 4560 */         if (this.ae >= 1.0F)
/*      */         
/* 4562 */         { this.ae = 0.0F;
/* 4563 */           this.ac = null;
/* 4564 */           this.af = false; }  }  }  } public strictfp void e() { e e1 = this.aj.k(); if (e1 != null) { if (!e1.c()) { e1.b(); } else { l.b("stopAndClose: inGameActivity is isFinishing"); }  } else { l.b("stopAndClose: Error getInGameActivity==null"); }  } public strictfp void a(float paramFloat) { if (ao() && paramFloat < 0.1F) ad.f("updateAllGame1: deltaSpeed:" + paramFloat + " frame:" + this.bg + " network.currentStepRate:" + this.bF.a());  if (this.bc != 1.0F) if (!this.bF.z && !this.bJ.g()) paramFloat *= this.bc;   paramFloat *= this.K; this.L = paramFloat + 2.0F; this.M = paramFloat; this.bF.b(paramFloat); this.bh = (int)(this.bh + paramFloat * 16.666666F); this.bN.c(); this.bJ.a(paramFloat); this.bg++; m.d(paramFloat); if (this.bt != null) this.bt.e(paramFloat);  if (ao() && paramFloat < 0.1F) ad.f("updateAllGame2: deltaSpeed:" + paramFloat + " frame:" + this.bg);  af.bt(); o o = w.dp(); Object[] arrayOfObject = o.b(); int k = o.size(); boolean bool = ao(); int m; for (m = 0; m < k; m++) { w w = (w)arrayOfObject[m]; if (bool) if (paramFloat != this.M) { ad.g("JIT bug detected, attempting to correct. before object:" + w.dA + " frame:" + this.bg + " deltaSpeed:" + paramFloat); paramFloat = this.M; }   w.a(paramFloat); }  if (ao() && paramFloat < 0.1F) ad.f("updateAllGame3: deltaSpeed:" + paramFloat + " frame:" + this.bg);  m = o.a.size(); byte b1; for (b1 = 0; b1 < m; b1++) { r r = (r)o.a.get(b1); if (r.a == q.a) { w w = (w)r.b; if (!w.dC) w.a(paramFloat);  }  }  this.bL.a(bk.m); this.bK.a(); this.bL.b(bk.m); r.g(paramFloat); k.a(paramFloat, 0); this.l++; if (this.l >= 1000) { this.l = 0; b1 = 0; for (af af1 : af.bt()) { if (af1.bz && !(af1 instanceof com.corrodinggames.rts.game.units.ae)) b1++;  }  byte b2 = 70; if (b1 > 70) { o o1 = af.bt(); for (af af1 : o1) { if (af1 instanceof af) { af af2 = af1; if (af2.bz && !(af2 instanceof com.corrodinggames.rts.game.units.ae)) if (af2.bA < (this.bh - 30000)) if (b1 > 70) { af2.a(); b1--; }    }  }  }  }  this.bL.a(bk.l); m.c(paramFloat); this.bL.b(bk.l); a.a(paramFloat); this.bz.a(paramFloat); this.H.a(paramFloat); y.a(paramFloat); if (this.bM != null) this.bM.c(paramFloat);  this.bL.a(bk.o); this.bD.a(paramFloat); this.bL.b(bk.o); this.bL.a(bk.n); this.bE.a(paramFloat); this.bL.b(bk.n); this.bC.b(paramFloat); } public strictfp void a(h paramh, float paramFloat) { synchronized (this.y) { b(paramh, paramFloat); }  } public strictfp void b(h paramh, float paramFloat) { if (paramh == null) { b("drawAll", "canvas is null, not may not be available yet"); return; }  this; if (av) return;  this.bw.a(paramh); this.bw.a(this.aj.d()); this.bw.f(); this.bi++; f.v = 0.0F; float f = this.bU; if (f != 1.0F) { this.bw.h(); this.bw.a(f, f); }  if (this.db) { this.bw.b(Color.a(0, 0, 0)); this.bw.a("Loading..", this.bV, this.bW, this.cW); return; }  this.bL.a(bk.d); c(paramh, paramFloat); this.bL.b(bk.d); if (!t()) { this.bL.a(bk.f); d(paramh, paramFloat); this.bL.b(bk.f); }  if (this.by.showFps && this.cA == 0.0F && !this.cB) this.bw.a(this.w, 100.0F, 35.0F, this.o);  if (f != null) this.bw.a(f, 100.0F, 85.0F, this.o);  if (!this.al) if (this.bw.c() != null || l.aG) this.bA.c(paramFloat);   this.bw.g(); if (f != 1.0F) paramh.a();  } public strictfp boolean f() { if (!this.by.showUnitIcons) return false;  if (this.cE < 0.7D) if (this.cl >= this.bt.f() - 5.0F && this.ci >= this.bt.g() - 5.0F) return true;   if (v()) return (this.cE < 0.1D);  if (al()) return (this.cE < 0.27D);  return (this.cE < 0.4D); } public strictfp void b(float paramFloat) { boolean bool = false; if (this.cx.a < 0 || this.cx.b < 0 || this.cx.c > this.bt.f() || this.cx.d > this.bt.g()) bool = true;  if (bool) this.bw.b(Color.a(0, 0, 0));  } public strictfp void c(float paramFloat) {} public strictfp void c(h paramh, float paramFloat) { if (!this.bp) return;  this.bL.a(bk.h); this.U.b(); this.dd = 0; w[] arrayOfW1 = af.dK.a(); int k = w.dK.size(); for (byte b1 = 0; b1 < k; b1++) { w w = arrayOfW1[b1]; w.dE = w.a(this); if (w.dE) this.U.a(w);  }  this.bL.b(bk.h); this.bL.a(bk.i); if (!f()) Collections.sort((List<?>)this.U, (Comparator<?>)w.dB);  this.bL.b(bk.i); this.bL.a(bk.q); this.bL.a(bk.s); this.bw.h(); this.bw.a(this.cr); this.bL.b(bk.s); this.bL.a(bk.r); b(paramFloat); this.bL.b(bk.r); if (this.by.renderFancyWater) { if (this.N == null) this.N = this.bw.a(R.drawable.water_cloud);  if (this.O == null) this.O = this.bw.a(R.drawable.water_layer1);  if (this.P == null) this.P = this.bw.a(R.drawable.water_layer2);  this.R.a(this.cr); this.Q += 0.05F * paramFloat; if (this.Q > 100.0F) this.Q -= 100.0F;  this.bw.a(this.N, this.R, null, this.cb / 6, this.cc / 6, 1, 1); this.R.a(this.cs); this.S.a(this.cs); this.bw.h(); K(); this.bw.a(this.P, this.S, null, this.cb + this.Q, this.cc + this.Q, 0, 0); this.bw.a(this.O, this.S, null, this.cb, this.cc, 0, 0); this.bw.i(); }  this.bL.a(bk.t); if (this.bt != null) if (ah()) this.bt.d(paramFloat);   this.bL.b(bk.t); K(); this.bw.a(this.cs); boolean bool = f(); this.bC.c(paramFloat); this.bL.b(bk.q); w[] arrayOfW2 = this.U.a(); int m = this.U.size(); this.cJ = true; this.cK = true; this.cL = true; this.cM = true; this.cN = true; if (this.cE < 0.45D) { this.cL = false; this.cJ = false; this.cN = false; }  if (this.cE < 0.3D) { this.cM = false; this.cK = false; }  if (!bool) for (byte b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; if (w.dF == 0) w.c(paramFloat);  }   a.b(paramFloat); this.bL.a(bk.g); this.bz.a(paramFloat, 1); this.bL.b(bk.g); this.bL.a(bk.p); if (bool) { if (this.bA.p() == 0) { af.bn.a(255, 195, 195, 195); af.bo.a(255, 255, 255, 255); } else { af.bn.a(175, 175, 175, 175); af.bo.a(255, 255, 255, 255); }  byte b3; for (b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; if (!w.f(paramFloat)) w.c(paramFloat);  }  for (b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; w.a(paramFloat, true); w.o(paramFloat); }  } else { byte b3; for (b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; w.d(paramFloat); }  for (b3 = 0; b3 < k; b3++) { w w = arrayOfW1[b3]; if (!w.dE) if (w instanceof af) { af af1 = (af)w; if (!af1.ci) continue;  if (af1.bB != this.bb && !af1.bR()) continue;  } else { continue; }   w.e(paramFloat); if (!w.dE) w.o(paramFloat);  continue; }  for (b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; if (w.dF != 0 && w.dF != 10) w.c(paramFloat);  }  for (b3 = 0; b3 < m; b3++) { w w = arrayOfW2[b3]; w.a(paramFloat, false); w.o(paramFloat); }  m.e(paramFloat); }  this.cL = true; this.cM = true; this.bL.b(bk.p); this.bL.a(bk.g); this.bz.a(paramFloat, 2); this.bL.b(bk.g); for (byte b2 = 0; b2 < m; b2++) { w w = arrayOfW2[b2]; if (w.dF == 10) w.c(paramFloat);  }  this.H.b(paramFloat); if (this.bM != null) this.bM.a(paramFloat);  c(paramFloat); y.b(paramFloat); this.bK.c(paramFloat); this.bL.a(bk.e); this.bw.i(); this.bL.b(bk.e); } public strictfp void d(h paramh, float paramFloat) { this.bA.b(paramFloat); if (this.bM != null) this.bM.b(paramFloat);  this.bE.e(paramFloat); this.bz.b(paramFloat); if (this.by.showFps && this.cA == 0.0F) this.bL.c();  if (this.bO) this.bw.a("Look Mode", this.bV, this.bW, this.cW);  if (this.aW) { byte b1 = 20; for (byte b2 = 0; b2 < m.a; b2++) { m m = m.n(b2); if (m != null && m instanceof a) { a a1 = (a)m; this.bw.a(a1.i + "| c:" + a1.m, 20.0F, b1, this.cU); b1 += 20; }  }  }  } public strictfp void g() { this.bQ = O(); P(); this.bV = this.bS / 2.0F; this.bW = this.bT / 2.0F; this.bX = (int)(this.bT / 3.0F); float f1 = (int)(this.bS / 3.0F); if (this.bX > f1) this.bX = f1;  int k = (int)(250.0F * this.bQ); this.bX = f.b(this.bX, 60.0F, k); float f2 = this.cf + this.cp; float f3 = this.cg + this.cq; if (this.cz) { this.cm = this.bS; this.cn = this.bS; } else { this.cn = this.bS - this.bX + 1.0F; if (f.bw) { this.cm = this.bS; } else { this.cm = this.cn; }  }  if (this.cm < 1.0F) this.cm = 1.0F;  if (this.cn < 1.0F) this.cn = 1.0F;  if (this.cy != this.cz) if (!this.cz) { f2 -= this.bX / 2.0F / this.cE; } else { f2 += this.bX / 2.0F / this.cE; }   this.cy = this.cz; this.co = this.bT; this.ch = this.cm / this.cE; this.ci = this.co / this.cE; this.cl = this.cn / this.cE; this.cp = this.ch / 2.0F; this.cq = this.ci / 2.0F; this.cr.a(0, 0, (int)this.cm, (int)this.co); this.cs.a(0, 0, (int)this.ch + 1, (int)this.ci + 1); this.ct.a(0.0F, 0.0F, this.ch + 1.0F, this.ci + 1.0F); a(f2 - this.cp, f3 - this.cq); } public strictfp void b(int paramInt1, int paramInt2) { a(paramInt1, paramInt2, 1.0F); }
/*      */   public strictfp void a(int paramInt1, int paramInt2, float paramFloat) { this.bS = paramInt1; this.bT = paramInt2; this.bU = paramFloat; g(); }
/*      */   public strictfp String h() { if (l.aH) return "com.corrodinggames.rts.java";  if (l.aI) return "com.corrodinggames.rts.gdx";  if (aF) return "com.corrodinggames.rts.server";  if (this.ah == null) return "<null context>";  return this.ah.h(); }
/*      */   public strictfp String i() { if (l.aH) return "java";  if (l.aI) return "java-gdx";  if (aF) return "dedicatedServer";  if (this.ah == null) return "<null context>";  PackageManager packageManager = this.ah.f(); return packageManager.getInstallerPackageName(h()); }
/*      */   public strictfp boolean j() { if (o().contains("p")) return true;  return false; }
/*      */   public strictfp int c(boolean paramBoolean) { if (aF || paramBoolean) return 151;  try { PackageInfo packageInfo = this.ah.f().getPackageInfo(this.ah.h(), 0); return packageInfo.versionCode; } catch (android.content.pm.PackageManager.NameNotFoundException nameNotFoundException) { throw new RuntimeException(nameNotFoundException); }  }
/*      */   public strictfp boolean k() { return l(); }
/*      */   public strictfp boolean l() { if (r.class.getSimpleName().equals("OrderableUnit")) return true;  return false; }
/*      */   public strictfp String m() { if (a != null) return a;  String str = "v" + n(); if (!l.an) { str = "DEBUG BUILD - " + str; } else if (l.ao) { str = "TESTING BUILD - " + str; } else if (str.contains("p")) { str = "BETA VERSION - " + str; }  if (!l.aJ) if (l()) str = "RAW - " + str;   a = str; return a; }
/*      */   public strictfp String n() { return "1.14"; }
/*      */   public strictfp String o() { return "1.14"; }
/*      */   public synchronized strictfp void p() { this.Z = false; if (this.Y != null) { this.Y.cancel(); this.Y = null; }  }
/*      */   public synchronized strictfp void a(Activity paramActivity, d paramd, boolean paramBoolean) { synchronized (this.aa) { if (!aF) paramd.a();  this.ai = (Context)paramActivity; this.al = paramBoolean; this.cz = this.al; if (paramBoolean) if (!this.bp && !this.br) if (!l.as) if (!this.bF.z) q();     d d1 = this.ak; if (this.aj == null) this.aj = paramd;  this.ak = paramd; if (d1 != null && d1 != paramd) d1.l();  if (paramd != null) paramd.o();  if (this.bA != null) this.bA.e();  p(); C(); }  }
/* 4577 */   strictfp af a(m paramm) { byte b1 = 0;
/*      */     
/* 4579 */     for (af af1 : af.bj) {
/*      */       
/* 4581 */       if (!af1.o_())
/*      */       {
/* 4583 */         if (af1.bB == paramm || paramm == null)
/*      */         {
/* 4585 */           b1++;
/*      */         }
/*      */       }
/*      */     } 
/* 4589 */     if (b1 > 0) {
/*      */       
/* 4591 */       int k = f.a(0, b1 - 1);
/* 4592 */       int n = 0;
/*      */       
/* 4594 */       for (af af1 : af.bj) {
/*      */         
/* 4596 */         if (!af1.o_())
/*      */         {
/* 4598 */           if (af1.bB == paramm || paramm == null) {
/*      */             
/* 4600 */             if (n == k)
/*      */             {
/* 4602 */               return af1;
/*      */             }
/* 4604 */             n++;
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/* 4610 */     return null; }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   strictfp af r() {
/* 4616 */     af af1 = a(this.bb);
/* 4617 */     if (af1 != null)
/*      */     {
/* 4619 */       return af1;
/*      */     }
/*      */ 
/*      */     
/* 4623 */     return a((m)null);
/*      */   }
/*      */ 
/*      */   
/*      */   public strictfp boolean a(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
/* 4628 */     float f1 = f.d(this.cf + this.cp, this.cg + this.cq, paramFloat2, paramFloat3);
/*      */     
/* 4630 */     float f2 = f.a(this.cf + this.cp, this.cg + this.cq, paramFloat2, paramFloat3);
/*      */     
/* 4632 */     float f3 = paramFloat4 * paramFloat1;
/*      */     
/* 4634 */     float f4 = 15.0F;
/* 4635 */     if (f4 < f3 + 1.0F)
/*      */     {
/* 4637 */       f4 = f3 + 1.0F;
/*      */     }
/*      */     
/* 4640 */     if (f2 < f4 * f4 || this.ca)
/*      */     {
/* 4642 */       return true;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4649 */     this.cj += f.i(f1) * f3;
/* 4650 */     this.ck += f.h(f1) * f3;
/*      */     
/* 4652 */     if (f.c(this.cj) >= 1.0F || f.c(this.ck) >= 1.0F) {
/*      */       
/* 4654 */       this.cf += this.cj;
/* 4655 */       this.cg += this.ck;
/* 4656 */       this.cj = 0.0F;
/* 4657 */       this.ck = 0.0F;
/*      */       
/* 4659 */       a(this.cf, this.cg);
/*      */     } 
/*      */ 
/*      */     
/* 4663 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public strictfp int s() {
/* 4682 */     return this.d;
/*      */   }
/*      */ }


/* Location:              D:\Rusted Warfare\Rusted Warfare\game-lib.jar!\com\corrodinggames\rts\game\i.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */