/*      */ package com.corrodinggames.rts.game.a;
/*      */ 
/*      */ import android.graphics.PointF;
/*      */ import com.corrodinggames.rts.game.b.g;
/*      */ import com.corrodinggames.rts.game.units.a.s;
/*      */ import com.corrodinggames.rts.game.units.af;
/*      */ import com.corrodinggames.rts.game.units.ah;
/*      */ import com.corrodinggames.rts.game.units.ak;
/*      */ import com.corrodinggames.rts.game.units.al;
/*      */ import com.corrodinggames.rts.game.units.an;
/*      */ import com.corrodinggames.rts.game.units.ao;
/*      */ import com.corrodinggames.rts.game.units.custom.g;
/*      */ import com.corrodinggames.rts.game.units.custom.h;
/*      */ import com.corrodinggames.rts.game.units.custom.l;
/*      */ import com.corrodinggames.rts.game.units.d.c;
/*      */ import com.corrodinggames.rts.game.units.d.k;
/*      */ import com.corrodinggames.rts.game.units.f.f;
/*      */ import com.corrodinggames.rts.game.units.r;
/*      */ import com.corrodinggames.rts.gameFramework.e;
/*      */ import com.corrodinggames.rts.gameFramework.f;
/*      */ import com.corrodinggames.rts.gameFramework.g.ap;
/*      */ import com.corrodinggames.rts.gameFramework.g.k;
/*      */ import com.corrodinggames.rts.gameFramework.l;
/*      */ import com.corrodinggames.rts.gameFramework.utility.m;
/*      */ import com.corrodinggames.rts.gameFramework.utility.u;
/*      */ import com.corrodinggames.rts.gameFramework.utility.y;
/*      */ import java.util.ArrayList;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class i
/*      */   extends o
/*      */ {
/*      */   float a;
/*      */   j b;
/*      */   k c;
/*   59 */   float d = -1.0F;
/*      */ 
/*      */   
/*      */   float e;
/*      */ 
/*      */   
/*      */   float f;
/*      */ 
/*      */   
/*   68 */   float g = 100.0F;
/*      */   
/*      */   int h;
/*      */   
/*   72 */   float i = 50.0F;
/*   73 */   float j = 50.0F;
/*      */   
/*      */   float k;
/*      */   
/*      */   float l;
/*      */   
/*      */   float m;
/*      */   
/*      */   boolean n;
/*      */   boolean o;
/*   83 */   m p = new m();
/*      */ 
/*      */   
/*   86 */   u q = new u();
/*      */   
/*   88 */   u r = new u();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   boolean s;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   boolean t;
/*      */ 
/*      */ 
/*      */   
/*      */   float u;
/*      */ 
/*      */ 
/*      */   
/*  106 */   float v = 0.0F;
/*      */   
/*  108 */   PointF w = new PointF();
/*  109 */   PointF x = new PointF();
/*      */   
/*      */   int y;
/*      */   
/*      */   al z;
/*      */   
/*      */   g A;
/*      */   
/*      */   g B;
/*      */   
/*      */   int C;
/*      */   int D;
/*      */   String E;
/*      */   int F;
/*      */   int G;
/*      */   boolean H = false;
/*      */   int I;
/*      */   int J;
/*      */   int K;
/*      */   int L;
/*      */   boolean M;
/*      */   ArrayList N;
/*      */   al O;
/*      */   g P;
/*      */   
/*      */   public void a(ap paramap) {
/*  135 */     paramap.a(this.b);
/*  136 */     paramap.a(this.c);
/*      */     
/*  138 */     paramap.a(this.d);
/*  139 */     paramap.a(this.e);
/*  140 */     paramap.a(this.f);
/*  141 */     paramap.a(this.g);
/*  142 */     paramap.a(this.i);
/*  143 */     paramap.a(this.j);
/*  144 */     paramap.a(this.k);
/*  145 */     paramap.a(this.l);
/*      */ 
/*      */ 
/*      */     
/*  149 */     paramap.c(4);
/*      */ 
/*      */     
/*  152 */     paramap.a(this.v);
/*      */ 
/*      */     
/*  155 */     paramap.a(this.m);
/*      */ 
/*      */     
/*  158 */     paramap.a(this.n);
/*  159 */     paramap.a(this.o);
/*      */ 
/*      */     
/*  162 */     paramap.a(this.h);
/*      */     
/*  164 */     super.a(paramap);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public void a(k paramk) {
/*  170 */     this.b = (j)paramk.b(j.class);
/*  171 */     this.c = (k)paramk.b(k.class);
/*      */ 
/*      */     
/*  174 */     this.d = paramk.g();
/*  175 */     this.e = paramk.g();
/*  176 */     this.f = paramk.g();
/*  177 */     this.g = paramk.g();
/*  178 */     this.i = paramk.g();
/*  179 */     this.j = paramk.g();
/*  180 */     this.k = paramk.g();
/*  181 */     this.l = paramk.g();
/*      */ 
/*      */     
/*  184 */     byte b = paramk.d();
/*      */     
/*  186 */     if (b >= 1)
/*      */     {
/*  188 */       this.v = paramk.g();
/*      */     }
/*      */     
/*  191 */     if (b >= 2)
/*      */     {
/*  193 */       this.m = paramk.g();
/*      */     }
/*      */     
/*  196 */     if (b >= 3) {
/*      */       
/*  198 */       this.n = paramk.e();
/*  199 */       this.o = paramk.e();
/*      */     } 
/*      */     
/*  202 */     if (b >= 4)
/*      */     {
/*  204 */       this.h = paramk.f();
/*      */     }
/*      */     
/*  207 */     super.a(paramk);
/*      */   } public PointF a() { l l = l.u(); PointF pointF = null; int n = (int)(this.U * l.bt.o); l.bt.a(this.S, this.T); int i1 = l.bt.M; int i2 = l.bt.N; for (int i3 = i1 - n; i3 <= i1 + n; i3++) { for (int i4 = i2 - n; i4 <= i2 + n; i4++) { if (l.bt.c(i3, i4)) { g g1 = l.bt.e(i3, i4); if (g1 != null) if (g1.i) { af af = c.b(i3, i4); boolean bool = false; if (af == null) bool = true;  if (af != null && af instanceof r) { r r = (r)af; if (!r.r().p()) bool = true;  }  if (bool) { l.bt.a(i3, i4); if (pointF == null || f.a(0, 100) < 50) { this.w.a((l.bt.M + l.bt.m), (l.bt.N + l.bt.n)); pointF = this.w; }  }  }   }  }  }  return pointF; } public void a(r paramr) { this.q.remove(paramr); } public void b() { this.p.clear(); this.q.clear(); af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && !af.bz && !af.o_()) if (a(af)) { this.q.a(af); al al1 = af.db; if (!this.p.contains(al1)) this.p.add(al1);  }   }  } public boolean a(al paramal) { if (a(paramal, false, true) != null) return true;  return false; } public boolean b(al paramal) { l l = l.u(); if ((l.am && !paramal.B()) || paramal.w()) return false;  Object[] arrayOfObject = this.p.a(); byte b; int n; for (b = 0, n = this.p.size(); b < n; b++) { al al1 = (al)arrayOfObject[b]; af[] arrayOfAf = this.q.a(); byte b1; int i1; for (b1 = 0, i1 = this.q.size(); b1 < i1; b1++) { af af = arrayOfAf[b1]; if (af.r() == al1 && af instanceof r) { r r = (r)af; if (r.b(paramal, true)) return true;  break; }  }  }  return false; } public al c() { l l = l.u(); if (this.R.aH) return null;  int n = a(this.R.bk); al al1 = null; float f = -1.0F; for (al al2 : ak.ad) { if (!al2.j()) continue;  if (!b(al2)) continue;  int i1 = this.R.a(al2, b.a); int i2 = c(al2); boolean bool = false; if (al2 instanceof l) { bool = true; l l1 = (l)al2; if (l1.fz.size() != 0) for (al al3 : l1.fz) { i1 += this.R.a(al3, b.a); i2 += c(al3); }   }  float f1 = -2.0F; if (al2.p() && !bool) { int i3 = i2; if (a() != null && f.a(0, 100) < 90) { if (i3 == 0) if (this.R.m < 5000) { f1 = 0.98F; } else { f1 = 0.58F; }   if (i3 == 1) f1 = 0.55F;  if (i3 == 2) f1 = 0.4F;  if (i3 >= 3) f1 = 0.25F / i3;  if (i1 >= 3) f1 = (float)(f1 * 0.6D);  }  }  if (al2 == ak.b) if (i1 < 5 || n == 0) if (i1 == 0) { f1 = 0.8F; } else if (i2 < 2) { f1 = 0.46F / (i1 + i2 * 2); }    if (al2 == ak.d) if (this.R.W()) if (i1 < 5 || n == 0) if (i1 == 0) { f1 = 0.3F; } else if (i2 < 1) { f1 = 0.1F / (i1 + i2 * 2); }     if (al2 == ak.c) if (i1 < 5 || n == 0) if (i1 == 0) { f1 = 0.48F; } else if (i2 < 2) { f1 = 0.29F / (i1 + i2); }    if (al2 == ak.f) if (i2 == 0) { f1 = 0.47F; } else if (i2 < 3) { f1 = 0.35F / i2; } else if (i2 < 4) { f1 = 0.025F / i2; }   if (al2 == ak.y) if (i2 == 0) f1 = 0.018F;   if (al2 == ak.B) if (i2 == 0) f1 = 0.02F;   if (al2 == ak.g) if (i2 == 0) { f1 = 0.42F; } else if (this.R.R()) { if (i2 < 4) f1 = 0.3F / i2;  } else if (i2 < 3) { f1 = 0.3F / i2; } else if (i2 < 4) { f1 = 0.02F / i2; }   if (al2 == ak.J) if (this.R.m > 2000) if (i2 < 5) if (i1 == 0) { f1 = 0.11F; } else { f1 = 0.07F / (0.2F * i1 + i2); }     if (al2 == ak.D) if (!l.H() || !l.bF.aH.i) if (this.R.m > 2200) if (i1 < 4) if (i1 == 0) { f1 = 0.06F; } else if (i2 < 1) { f1 = 0.05F / (i1 + i2 * 2); }      if (bool) { l l1 = (l)al2; if (!l1.fk) if (i1 < l1.fl || l1.fl == -1) if (i2 < l1.fm || l1.fm == -1) { f1 = l1.fn; if (i2 < l1.fo) f1 = l1.fp;  if (i2 == 0) f1 += l1.fq;  if (i1 == 0) f1 += l1.fr;  if (al2.p()) if (a() == null) f1 = -2.0F;   }    }  if (this.R.S()) if (al2 == ak.G) if (this.R.m > 15000) { if (i1 == 0) f1 = 0.04F;  if (this.R.m > 55000) if (i1 == 1) f1 = 0.03F;   }    if (f1 >= 0.0F) if (f1 > f || f.c(0.0F, 1.0F) < 0.01D) { f = f1; al1 = al2; }   }  this.f = f; return al1; }
/*      */   public int a(d paramd) { int n = 0; for (e e : paramd.c) n += c(e.a);  return n; }
/*      */   public int c(al paramal) { byte b1 = 0; u u1 = this.q; af[] arrayOfAf = u1.a(); byte b2; int n; for (b2 = 0, n = u1.size(); b2 < n; b2++) { af af = arrayOfAf[b2]; if (af.bB == this.R) if (af.db == paramal) if (a(af)) b1++;    }  return b1; }
/*      */   public int d() { byte b1 = 0; u u1 = this.q; af[] arrayOfAf = u1.a(); byte b2; int n; for (b2 = 0, n = u1.size(); b2 < n; b2++) { af af = arrayOfAf[b2]; if (af.bB == this.R) if (af instanceof r) { r r = (r)af; if (a(r, false)) if (!r.br) if (r.ar == null) if (this.R.h((af)r) && this.R.i((af)r)) b1++;     }   }  return b1; }
/*      */   public int e() { return this.K; }
/*      */   public boolean f() { int n = h(); return (n != 0); }
/*      */   public af g() { float f = this.U + 120.0F; af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.dH + f > this.S && af.dH - f < this.S && af.dI + f > this.T && af.dI - f < this.T) if (af.bB != this.R && a(af, 120.0F) && af.bB.c(this.R)) if (this.R.j(af)) return af;    }  return null; }
/*  215 */   public i(a parama, float paramFloat1, float paramFloat2) { super(parama, paramFloat1, paramFloat2);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2883 */     this.N = new ArrayList(); }
/*      */   public int h() { return a(60.0F); }
/*      */   public int a(float paramFloat) { byte b1 = 0; float f = this.U + paramFloat; af[] arrayOfAf = af.bj.a(); byte b2; int n; for (b2 = 0, n = af.bj.size(); b2 < n; b2++) { af af = arrayOfAf[b2]; if (af.dH + f > this.S && af.dH - f < this.S && af.dI + f > this.T && af.dI - f < this.T) if (af.bB != this.R && a(af, paramFloat) && af.bB.c(this.R) && af.l()) if (this.R.j(af)) b1++;    }  return b1; }
/*      */   public void i() { l l = l.u(); af af = g(); if (af != null) { e e = l.bN.a(this.R); af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af1 = arrayOfAf[b]; if (af1 instanceof r) { r r = (r)af1; if (af1.bB == this.R) if (this.R.b(af1, af) && this.R.i((af)r)) if (r.ao()) if (!af1.br) { if (a.a(af1, this.S, this.T, 800.0F)) e.a(r);  } else if (a.a(af1, this.S, this.T, 540.0F)) { e.a(r); }     }  }  e.a(af); }  }
/* 2887 */   public boolean a(af paramaf) { return a(paramaf, false); } public boolean a(af paramaf, boolean paramBoolean) { if (paramaf instanceof r && ((r)paramaf).as == this) if (!paramBoolean || b(paramaf)) return true;   return false; } public boolean a(r paramr, boolean paramBoolean) { if (paramr.as == this) if (!paramBoolean || b((af)paramr)) return true;   return false; } public int j() { byte b = 0; for (af af : l()) { if (this.R != af.bB && af.bB.c(this.R) && af instanceof r) if (b(af)) b++;   }  return b; } public f l() { l l = l.u(); return l.bK.b(this.S, this.T, this.U); } private r x() { return a((al)null, (PointF)null, true); } private r y() { return f((al)null); } private r f(al paramal) { return a(paramal, (PointF)null, false); } private r a(al paramal, PointF paramPointF, boolean paramBoolean) { if (this.K == 0) return null;  this.y = 0; float f = Float.MAX_VALUE; r r = null; l l = l.u(); if (paramal != null) if ((l.am && !paramal.B()) || paramal.w()) return null;   af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && a(af) && af.cp == null) if (af.ah() && af instanceof r && this.R.i(af)) { r r1 = (r)af; boolean bool = f.a(r1); if (bool && (!paramBoolean || r1.I())) { this.y++; if (paramal == null || r1.b(paramal, true)) { boolean bool1 = false; float f1 = -1.0F; if (paramPointF != null) f1 = f.a(paramPointF.a, paramPointF.b, af.dH, af.dI);  if (r == null) { bool1 = true; } else { if (paramPointF != null) if (f1 < f) bool1 = true;   if (f.c(0.0F, 1.0F) < 0.2D) bool1 = true;  }  if (bool1) { r = (r)af; if (paramPointF != null) f = f1;  }  }  }  }   }  return r; } private r a(af paramaf, PointF paramPointF, boolean paramBoolean) { if (this.L == 0) return null;  float f = Float.MAX_VALUE; r r = null; l l = l.u(); af[] arrayOfAf = this.q.a(); byte b; int n; for (b = 0, n = this.q.size(); b < n; b++) { af af1 = arrayOfAf[b]; if (af1.bB == this.R && a(af1) && af1.cp == null) { al al1 = af1.r(); if (al1.n() && af1 instanceof r && this.R.i(af1)) { r r1 = (r)af1; boolean bool = f.b(r1); if (bool && (!paramBoolean || r1.I())) if (paramaf == null || r1.x(paramaf)) { boolean bool1 = false; if (al1 instanceof l) { l l1 = (l)al1; if (l1.fv != null) if (!a(l1.fv)) continue;   }  float f1 = -1.0F; if (paramPointF != null) f1 = f.a(paramPointF.a, paramPointF.b, af1.dH, af1.dI);  if (r == null) { bool1 = true; } else { if (paramPointF != null) if (f1 < f) bool1 = true;   if (f.c(0.0F, 1.0F) < 0.2D) bool1 = true;  }  if (bool1) { r = (r)af1; if (paramPointF != null) f = f1;  }  }   }  }  continue; }  return r; } private boolean g(al paramal) { PointF pointF; this.z = paramal; this.A = null; this.B = null; l l = l.u(); if (paramal.p()) { pointF = a(); } else { pointF = e(paramal); }  if (pointF == null) return false;  r r = a(paramal, pointF, false); if (r == null) return false;  if (paramal == ak.d) { this.R.getClass(); if (y.c(pointF.a, pointF.b, ah.e) < 3000) return false;  }  int n = 1; s s = r.a(paramal, true); if (s != null) { n = s.p(); } else { l.b("buildBuilding: could not find getBuildUnitAction for builder this shouldn't happen:" + paramal.i()); }  if (!s.a((af)r) || !s.a((af)r, false)) { if (!this.R.a(s.y(), (af)r)) { this.A = s.y(); this.B = this.A.g((af)r); }  } else if (s.x()) { e e = l.bN.a(this.R); e.a(r); e.a(s.J(), pointF, null); } else { e e = l.bN.a(this.R); e.a(r); e.a(pointF.a, pointF.b, paramal, n); }  return true; } private boolean z() { af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && a(af) && af.bG() && !af.o_()) if (af instanceof r) { r r = (r)af; if (r.ag()) return true;  }   }  return false; } public boolean a(com.corrodinggames.rts.game.units.custom.i parami) { af[] arrayOfAf = this.q.a(); byte b; int n; for (b = 0, n = this.q.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && af.bG()) { com.corrodinggames.rts.game.units.custom.i i1 = af.cM(); if (i1 != null && h.a(parami, i1)) return true;  }  }  return false; } private r a(al paramal, boolean paramBoolean1, boolean paramBoolean2) { af[] arrayOfAf = this.q.a(); byte b; int n; for (b = 0, n = this.q.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && af.bG() && this.R.i(af)) if (af instanceof k && af instanceof r) { r r = (r)af; k k1 = (k)af; s s = af.e(paramal); if (s != null) if (k1.de() || !paramBoolean1) { if (s.n(af)) continue;  if (!s.a((af)r)) continue;  if (!s.a((af)r, false)) continue;  if (af instanceof com.corrodinggames.rts.game.units.d.d) if (!paramal.m() && u() > 2) if (!this.s && paramBoolean1) continue;    if (!paramBoolean2 || r.at) return r;  }   }   continue; }  return null; } public void a(ArrayList paramArrayList, d paramd, ah paramah, int paramInt) { this.N.clear();
/*      */ 
/*      */ 
/*      */     
/* 2891 */     for (byte b = 0; b < paramInt; b++) {
/*      */       
/* 2893 */       al al1 = paramd.a(paramah);
/* 2894 */       if (al1 != null)
/*      */       {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 2905 */         if (!this.N.contains(al1))
/*      */         {
/* 2907 */           this.N.add(al1);
/*      */         }
/*      */       }
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2915 */     paramArrayList.addAll(this.N); }
/*      */   private boolean a(d paramd, boolean paramBoolean) { ArrayList arrayList = paramd.a(); for (e e : arrayList) { if (a(e.a, paramBoolean)) return true;  }  return false; }
/*      */   private boolean a(al paramal, boolean paramBoolean) { boolean bool = true; return a(paramal, paramBoolean, bool); }
/*      */   private boolean a(al paramal, boolean paramBoolean, int paramInt) { if (paramInt < 1) { l.b("AI", "buildUnit: quantity cannot be < 1"); return false; }  r r = a(paramal, true, paramBoolean); if (r == null); if (r == null) return false;  l l = l.u(); s s = r.e(paramal); if (s == null) { l.b("AI", "buildUnit: action is null!"); return false; }  if (!s.a((af)r)) { l.b("AI", "buildUnit: isAvailable==false"); return false; }  if (!s.a((af)r, false)) { l.b("AI", "buildUnit: isActive==false"); return false; }  if (s.h((af)r) || (s.k_() && l.am)) return false;  for (byte b = 0; b < paramInt; b++) { e e = l.bN.a(this.R); e.a(r); e.a(s.w()); }  return true; }
/*      */   i m() { float f = -1.0F; i i1 = null; for (o o1 : this.R.aV) { if (o1 instanceof i) { i i2 = (i)o1; if (i2 != this) if (i2.e() > 1) { float f1 = i2.a(this); if (i1 == null || f1 < f) { f = f1; i1 = i2; }  }   }  }  return i1; }
/*      */   public void n() { l l = l.u(); i i1 = m(); if (i1 != null) if (i1.e() > 1) { r r = i1.x(); if (r != null) { PointF pointF = w(); if (y.a((af)r, pointF.a, pointF.b)) { boolean bool = this.R.a((af)r, pointF.a, pointF.b); if (bool || this.R.ap != 0) { e e = l.bN.a(this.R); e.a(r); e.a(pointF.a, pointF.b); this.h++; this.g = f.a(1800, 2500); if (this.h >= 2) this.g += 11000.0F;  i1.K--; if (!bool) { boolean bool1 = true; if (r.ar != null) if (!r.ar.a()) { r.ar.b(r); } else { bool1 = false; if (!r.ar.C.contains(r)) r.ar.C.add(r);  }   if (bool1) { l l1 = new l(this.R); l1.c(r); l1.S = pointF.a; l1.T = pointF.b; }  this.g = f.a(12000, 14000); }  }  }  }  }   }
/*      */   private af A() { af[] arrayOfAf = af.bj.a(); byte b; int n; for (b = 0, n = af.bj.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && a(af, true)) if (af.bw()) if (af.bY < af.bZ - 1.0F || af.bR < 1.0F)
/* 2922 */             return af;    }  return null; } public void v() { ah ah; int n = d();
/*      */     
/* 2924 */     byte b1 = 12;
/*      */     
/* 2926 */     byte b2 = 50;
/*      */     
/* 2928 */     if (this.R.R()) {
/*      */       
/* 2930 */       b2 = 65;
/* 2931 */       b1 = 16;
/*      */     } 
/*      */     
/* 2934 */     boolean bool1 = this.R.j(25000);
/* 2935 */     boolean bool = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2941 */     ArrayList<al> arrayList = new ArrayList();
/*      */     
/* 2943 */     boolean bool2 = this.R.X();
/* 2944 */     boolean bool3 = this.R.Y();
/*      */     
/* 2946 */     float f1 = 0.4F;
/* 2947 */     float f2 = 0.3F;
/* 2948 */     float f3 = 0.2F;
/* 2949 */     if (!this.R.aP) {
/*      */       
/* 2951 */       f1 = 0.1F;
/* 2952 */       f2 = 0.5F;
/* 2953 */       f3 = 0.4F;
/*      */     } 
/* 2955 */     if (!this.R.aQ) {
/*      */       
/* 2957 */       f1 = 0.2F;
/* 2958 */       f2 = 0.1F;
/* 2959 */       f3 = 0.7F;
/*      */     } 
/*      */ 
/*      */     
/* 2963 */     float f4 = f.c(0.0F, 1.0F);
/* 2964 */     if (f4 < f1) {
/*      */       
/* 2966 */       ah = ah.b;
/*      */     }
/* 2968 */     else if (f4 < f1 + f2) {
/*      */       
/* 2970 */       ah = ah.f;
/*      */     }
/*      */     else {
/*      */       
/* 2974 */       ah = ah.d;
/*      */     } 
/*      */     
/* 2977 */     if ((this.R.j(1300) && this.d >= 1.0F) || (this.R.j(300) && this.d >= 3.0F)) {
/*      */ 
/*      */       
/* 2980 */       if (this.R.W())
/*      */       {
/* 2982 */         if (this.R.aL < b1) {
/*      */           
/* 2984 */           int i1 = f.b(100);
/* 2985 */           if (i1 < 35) {
/*      */             
/* 2987 */             a(arrayList, this.R.bc, (ah)null, 2);
/*      */ 
/*      */ 
/*      */             
/* 2991 */             if (bool1) bool = true;
/*      */           
/*      */           } 
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */       
/* 2999 */       if (n < 3)
/*      */       {
/* 3001 */         if (this.R.aJ < b2)
/*      */         {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 3007 */           if (ah == ah.b) {
/*      */ 
/*      */             
/* 3010 */             a(arrayList, this.R.aZ, (ah)null, 4);
/*      */             
/* 3012 */             if (bool1) bool = true;
/*      */           
/*      */           }
/* 3015 */           else if (ah == ah.f) {
/*      */ 
/*      */             
/* 3018 */             a(arrayList, this.R.ba, (ah)null, 4);
/*      */             
/* 3020 */             if (bool1) bool = true;
/*      */           
/*      */           }
/*      */           else {
/*      */             
/* 3025 */             a(arrayList, this.R.bb, (ah)null, 4);
/*      */             
/* 3027 */             if (bool1) bool = true;
/*      */           
/*      */           } 
/*      */         }
/*      */       }
/*      */       
/* 3033 */       if (this.d >= 1.0F && bool2 && this.m == 0.0F) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 3039 */         int i1 = this.R.a(this.R.bf, b.a);
/* 3040 */         int i2 = this.R.a(this.R.bg, b.a);
/*      */ 
/*      */         
/* 3043 */         int i3 = i1 + i2;
/*      */         
/* 3045 */         int i4 = this.R.ad();
/*      */         
/* 3047 */         if (this.R.j(1700) || i4 > 10 || (this.R.aT == 0 && i4 >= 1 && i1 == 0))
/*      */         {
/*      */ 
/*      */           
/* 3051 */           if (i3 < 3 || (i4 > 20 && i3 < 5))
/*      */           {
/*      */             
/* 3054 */             if (bool3 && i3 < 2) {
/*      */ 
/*      */ 
/*      */               
/* 3058 */               a(arrayList, this.R.be, (ah)null, 2);
/*      */             }
/*      */             else {
/*      */               
/* 3062 */               a(arrayList, this.R.be, ah.d, 2);
/*      */             } 
/*      */           }
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3088 */     if (arrayList.size() == 0)
/*      */     {
/* 3090 */       this.F++;
/*      */     }
/*      */ 
/*      */     
/* 3094 */     while (arrayList.size() != 0)
/*      */     
/*      */     { 
/*      */       
/* 3098 */       al al1 = arrayList.remove(arrayList.size() - 1);
/*      */       
/* 3100 */       af af = af.b(al1);
/*      */       
/* 3102 */       boolean bool4 = true;
/*      */       
/* 3104 */       if (this.s)
/*      */       {
/* 3106 */         if (f.b(100) < 10) {
/*      */           
/* 3108 */           af af1 = g();
/* 3109 */           if (af1 != null)
/*      */           {
/* 3111 */             if (!this.R.b(af, af1)) {
/*      */               
/* 3113 */               this.F++;
/*      */               
/* 3115 */               bool4 = false;
/*      */             } 
/*      */           }
/*      */         } 
/*      */       }
/*      */       
/* 3121 */       if (bool4)
/*      */       
/* 3123 */       { boolean bool5 = false;
/* 3124 */         if (a(al1, bool5)) {
/*      */           
/* 3126 */           this.F++;
/*      */ 
/*      */           
/* 3129 */           this.R.bm.a(al1);
/*      */           
/* 3131 */           this.d--;
/*      */           
/* 3133 */           if (this.R.g(af)) {
/*      */             
/* 3135 */             this.m = 1000.0F;
/* 3136 */             this.R.aT++;
/*      */           } 
/*      */ 
/*      */           
/*      */           break;
/*      */         } 
/*      */ 
/*      */         
/* 3144 */         this.G++; }  }  } public void o() { l l = l.u(); if (this.r.size() == 0) return;  if (this.s)
/*      */       return;  for (byte b = 0; b < 8; b++) { al al1 = this.R.bi.c(); if (al1 != null)
/*      */         if (a(al1)) { boolean bool = d(al1); if (bool)
/*      */             break;  }   }  }
/*      */   public boolean d(al paramal) { if (!(paramal instanceof l))
/*      */       return false;  l l = (l)paramal; if (l.fs == -1 && l.ft == -1)
/*      */       return false;  byte b1 = 0; byte b2 = 0; boolean bool = l.fu; af[] arrayOfAf = af.bj.a(); byte b3; int n; for (b3 = 0, n = af.bj.size(); b3 < n; b3++) { af af = arrayOfAf[b3]; if (af.bB != this.R || af.cp != null || !(af instanceof r) || !this.R.i(af))
/*      */         continue;  r r = (r)af; al al1 = af.r(); if (bool) { if (!al1.n())
/*      */           continue;  } else if (al1 != l) { if (!l.fz.contains(al1))
/*      */           continue;  }  b2++; if (a(af))
/*      */         b1++;  continue; }  if (l.fs != -1 && b1 >= l.fs)
/*      */       return false;  if (l.ft != -1 && b2 >= l.ft)
/*      */       return false;  return a((al)l, true); }
/*      */   public void p() { if (this.r.size() == 0)
/*      */       return;  af af = r(); if (af != null) { this.x.a(af.dH, af.dI); r r = a(af, this.x, true); if (r != null)
/*      */         a(r, af);  }  }
/*      */   public void q() { if (this.r.size() == 0)
/*      */       return;  if (this.B != null) { af[] arrayOfAf = this.q.a(); byte b; int n; for (b = 0, n = this.q.size(); b < n; b++) { af af = arrayOfAf[b]; if (af.bB == this.R && a(af) && af.cp == null) { al al1 = af.r(); if (al1.n() && af instanceof r && this.R.i(af))
/*      */             if (f.c(0.0F, 1.0F) <= 0.3D) { r r = (r)af; an an = r.ap(); if (an != null && an.d() == ao.g) { af af1 = an.i(); if (af1 != null && af1.g() > 0.0F)
/*      */                   if (!this.B.b(af1.cv())) { af af2 = r(); a(r, af2); break; }   }  }   }  }  }  }
/*      */   public af r() { af af = null; for (byte b = 0; b < 20; ) { af = this.r.a(f.a(0, this.r.size() - 1)); if (af != null)
/*      */         if (this.B != null)
/*      */           if (!this.B.b(af.cv()))
/*      */             b++;    }  return af; }
/*      */   public void a(r paramr, af paramaf) { l l = l.u(); if (paramr.w(paramaf)) { e e = l.bN.a(this.R); e.a(paramr); e.d(paramaf); }  }
/* 3169 */   public void a(r paramr, g paramg, boolean paramBoolean) { this.O = paramr.r();
/*      */     
/* 3171 */     if (paramBoolean) {
/*      */       
/* 3173 */       this.P = null;
/* 3174 */       this.B = null;
/*      */     }
/*      */     else {
/*      */       
/* 3178 */       this.P = paramg;
/* 3179 */       this.B = paramg.g((af)paramr);
/*      */     }  }
/*      */ 
/*      */   
/*      */   public void s() {
/*      */     l l = l.u();
/*      */     af af = A();
/*      */     if (af != null) {
/*      */       this.x.a(af.dH, af.dI);
/*      */       r r = a((al)null, this.x, true);
/*      */       if (r != null)
/*      */         if (r.a(af))
/*      */           if (af.e(r) < 2) {
/*      */             e e = l.bN.a(this.R);
/*      */             e.a(r);
/*      */             e.b(af);
/*      */           }   
/*      */     } 
/*      */   }
/*      */   
/*      */   public void b(float paramFloat) {
/*      */     c(paramFloat);
/*      */     int n = this.J;
/*      */     int i1 = this.I;
/*      */     b();
/*      */     this.n = z();
/*      */     if (this.n)
/*      */       this.o = true; 
/*      */     if (n >= 1)
/*      */       s(); 
/*      */     if (this.M && this.I > 0) {
/*      */       o();
/*      */       q();
/*      */       p();
/*      */     } 
/*      */     byte b = 2;
/*      */     if (n < b)
/*      */       if (this.i == 0.0F) {
/*      */         this.i = 300.0F;
/*      */         int i3 = this.R.a(this.R.bh, b.a);
/*      */         if (!this.s || i3 <= 2) {
/*      */           boolean bool1 = true;
/*      */           boolean bool2 = (f.a(0, 100) < 5) ? true : false;
/*      */           if (!bool2 && a(this.R.bh, bool1)) {
/*      */             this.H = false;
/*      */             this.i = 900.0F;
/*      */           } else {
/*      */             if (!bool2)
/*      */               this.H = true; 
/*      */             if (!this.s && this.v == 0.0F)
/*      */               if (n < 1)
/*      */                 if (this.g == 0.0F)
/*      */                   n();   
/*      */           } 
/*      */         } 
/*      */       }  
/*      */     int i2 = j();
/*      */     if (n == 0 && i1 == 0) {
/*      */       this.k += paramFloat;
/*      */       if (i2 > 2)
/*      */         this.k += 2.0F * paramFloat; 
/*      */       if (i2 > 5)
/*      */         this.k += 4.0F * paramFloat; 
/*      */     } else {
/*      */       this.k = f.a(this.k, paramFloat);
/*      */     } 
/*      */     if (this.k > 11000.0F)
/*      */       k(); 
/*      */     if (this.b == j.a)
/*      */       if ((n != 0 && i1 != 0) || (i1 > 5 && i2 == 0)) {
/*      */         this.l += paramFloat;
/*      */         if (this.l > 2000.0F)
/*      */           this.b = j.c; 
/*      */       }  
/*      */     t();
/*      */   }
/*      */   
/*      */   public void t() {
/*      */     if (this.b == null) {
/*      */       l.a("fixOverlaps: this.state==null");
/*      */       l.a("id:" + this.Q);
/*      */       l.a("x:" + this.S);
/*      */       l.a("y:" + this.T);
/*      */       l.a("radius:" + this.U);
/*      */       if (this.R != null)
/*      */         l.a("team:" + this.R.i); 
/*      */       return;
/*      */     } 
/*      */     for (o o1 : this.R.aU) {
/*      */       if (o1 instanceof i && o1 != this) {
/*      */         i i1 = (i)o1;
/*      */         float f = f.a(this.S, this.T, i1.S, i1.T);
/*      */         if (f < 400.0F) {
/*      */           if (i1.b == null) {
/*      */             l.a("fixOverlaps: targetBase.state==null");
/*      */             continue;
/*      */           } 
/*      */           if (i1.b.a() < this.b.a()) {
/*      */             i1.k();
/*      */             continue;
/*      */           } 
/*      */           k();
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   public int u() {
/*      */     return this.I;
/*      */   }
/*      */   
/*      */   public void c(float paramFloat) {
/*      */     this.I = 0;
/*      */     this.J = 0;
/*      */     this.L = 0;
/*      */     this.K = 0;
/*      */     this.M = false;
/*      */     this.r.clear();
/*      */     boolean bool = true;
/*      */     if (bool)
/*      */       for (af af : l()) {
/*      */         if (af.g() > 0.0F)
/*      */           if (b(af)) {
/*      */             this.M = true;
/*      */             this.r.a(af);
/*      */           }  
/*      */       }  
/*      */     af[] arrayOfAf = af.bj.a();
/*      */     byte b;
/*      */     int n;
/*      */     for (b = 0, n = af.bj.size(); b < n; b++) {
/*      */       af af = arrayOfAf[b];
/*      */       if (af.bB == this.R)
/*      */         if (af instanceof r) {
/*      */           r r = (r)af;
/*      */           if (a(r, false) && af.bG() && this.R.i(af) && !af.o_()) {
/*      */             al al1 = af.r();
/*      */             if (al1.j())
/*      */               this.I++; 
/*      */             if (al1.m()) {
/*      */               this.J++;
/*      */               boolean bool1 = f.a(r);
/*      */               if (bool1)
/*      */                 this.K++; 
/*      */             } 
/*      */             if (al1.n())
/*      */               this.L++; 
/*      */             if (af instanceof k) {
/*      */               k k1 = (k)af;
/*      */               this.J += k1.h((al)ak.h);
/*      */             } 
/*      */           } 
/*      */         }  
/*      */     } 
/*      */   }
/*      */   
/*      */   public void d(float paramFloat) {
/*      */     this.s = f();
/*      */     this.t = this.s;
/*      */     if (this.s) {
/*      */       this.v += paramFloat;
/*      */       this.u = 100.0F;
/*      */     } else {
/*      */       this.v = 0.0F;
/*      */     } 
/*      */     if (this.v > 6000.0F)
/*      */       this.s = false; 
/*      */     this.m = f.a(this.m, paramFloat);
/*      */     this.e = f.a(this.e, paramFloat);
/*      */     this.g = f.a(this.g, paramFloat);
/*      */     this.i = f.a(this.i, paramFloat);
/*      */     this.j = f.a(this.j, paramFloat);
/*      */     if (this.s)
/*      */       if (this.j == 0.0F) {
/*      */         this.j = (100 + this.Q % 15);
/*      */         if (!this.R.aH)
/*      */           i(); 
/*      */       }  
/*      */     if (this.e <= 0.0F) {
/*      */       this.e = (270 + this.Q % 15);
/*      */       if (this.R.R())
/*      */         this.e = (190 + this.Q % 15); 
/*      */       if (this.f < 0.2D)
/*      */         this.e += 180.0F; 
/*      */       if (this.f < 0.08D)
/*      */         this.e += 180.0F; 
/*      */       boolean bool = (y() != null) ? true : false;
/*      */       if (bool) {
/*      */         al al1 = null;
/*      */         al1 = c();
/*      */         if (al1 != null)
/*      */           if (this.f > 0.8D || this.R.j(1300))
/*      */             if (this.f > 0.4D || this.R.j(1700))
/*      */               if (this.f > 0.2D || this.R.j(2100))
/*      */                 if (this.f > 0.1D || this.R.j(2800))
/*      */                   if (this.f > 0.05D || this.R.j(3100))
/*      */                     if (this.f > 0.01D || this.R.j(4800)) {
/*      */                       this.C++;
/*      */                       if (!g(al1)) {
/*      */                         this.e -= 120.0F;
/*      */                         this.D++;
/*      */                       } 
/*      */                     }       
/*      */       } 
/*      */     } 
/*      */     float f = u();
/*      */     f /= 3.0F;
/*      */     if (f < 1.0F)
/*      */       f = 1.0F; 
/*      */     if (this.s)
/*      */       this.d = (float)(this.d + paramFloat * 0.015D); 
/*      */     if (this.f < 0.6D) {
/*      */       if (this.R.aK < 2) {
/*      */         this.d = (float)(this.d + paramFloat * 7.0E-4D * f);
/*      */       } else if (this.R.j(1200)) {
/*      */         this.d = (float)(this.d + paramFloat * 1.0E-4D * f);
/*      */       } 
/*      */       if (this.R.j(1600))
/*      */         this.d = (float)(this.d + paramFloat * 0.001D); 
/*      */       if (this.R.j(2200))
/*      */         this.d = (float)(this.d + paramFloat * 0.001D); 
/*      */       if (this.R.j(2600))
/*      */         this.d = (float)(this.d + paramFloat * 0.001D); 
/*      */       if (this.R.j(8000))
/*      */         this.d = (float)(this.d + paramFloat * 0.005D); 
/*      */       if (this.R.j(9000))
/*      */         this.d = (float)(this.d + paramFloat * 0.01D); 
/*      */       if (this.R.j(10100))
/*      */         this.d = (float)(this.d + paramFloat * 0.01D); 
/*      */       if (this.R.j(30000))
/*      */         this.d = (float)(this.d + paramFloat * 0.05D); 
/*      */     } 
/*      */     if (this.R.j(5000))
/*      */       this.d = (float)(this.d + paramFloat * 0.001D); 
/*      */     if (!this.R.j(800) && !this.s)
/*      */       if (this.d > 1.2F)
/*      */         this.d = 1.2F;  
/*      */     if (this.d > 3.5F)
/*      */       this.d = 3.5F; 
/*      */     for (byte b = 0; b < 12; ) {
/*      */       v();
/*      */       if (this.d >= 3.0F)
/*      */         b++; 
/*      */     } 
/*      */   }
/*      */ }


/* Location:              D:\Rusted Warfare\Rusted Warfare\game-lib.jar!\com\corrodinggames\rts\game\a\i.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */